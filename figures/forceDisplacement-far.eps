%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: forceDisplacement-far.pdf
%%Creator: Adobe Acrobat 10.1.15
%%For: valverda
%%CreationDate: 8/23/2017, 11:26:42 AM
%%BoundingBox: 0 0 720 408
%%HiResBoundingBox: 0 0 720 407.5200
%%CropBox: 0 0 720 407.5200
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 565 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2017-08-19T16:09:58+02:00"
   xmp:CreatorTool="matplotlib 2.0.1, http://matplotlib.org"
   pdf:Producer="matplotlib pdf backend"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -407.52 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 407.52 li
720 407.52 li
720 0 li
cp
clp
gsave
0 407.52 mo
720 407.52 li
720 -.479991 li
0 -.479991 li
0 407.52 li
clp
0 407.52 mo
720 407.52 li
720 0 li
0 0 li
0 407.52 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
90 362.693 mo
648 362.693 li
648 48.9023 li
90 48.9023 li
90 362.693 li
f
gsave
90 362.693 mo
648 362.693 li
648 48.9023 li
90 48.9023 li
90 362.693 li
clp
91.3672 362.693 mo
90.5673 362.693 li
90.5673 321.633 li
91.3672 321.633 li
91.3672 362.693 li
91.3672 320.833 mo
90.5673 320.833 li
90.5673 267.436 li
91.3672 267.436 li
91.3672 320.833 li
91.3672 266.636 mo
90.5673 266.636 li
90.5673 213.239 li
91.3672 213.239 li
91.3672 266.636 li
91.3672 212.44 mo
90.5673 212.44 li
90.5673 159.043 li
91.3672 159.043 li
91.3672 212.44 li
91.3672 158.243 mo
90.5673 158.243 li
90.5673 104.846 li
91.3672 104.846 li
91.3672 158.243 li
91.3672 104.046 mo
90.5673 104.046 li
90.5673 50.6494 li
91.3672 50.6494 li
91.3672 104.046 li
91.3672 49.8495 mo
90.5673 49.8495 li
90.5673 48.9023 li
91.3672 48.9023 li
91.3672 49.8495 li
/1 
[/DeviceCMYK] /CSA add_res
0 0 0 .245548 cmyk
f
grestore
90.9673 362.693 mo
90.9673 366.193 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
90.9673 362.693 mo
90.9673 366.193 li
@
84.2864 371.037 mo
83.5724 371.037 83.0404 371.387 82.6764 372.087 cv
82.3124 372.787 82.1444 373.837 82.1444 375.237 cv
82.1444 376.637 82.3124 377.687 82.6764 378.387 cv
83.0404 379.087 83.5724 379.437 84.2864 379.437 cv
85.0004 379.437 85.5324 379.087 85.8964 378.387 cv
86.2464 377.687 86.4284 376.637 86.4284 375.237 cv
86.4284 373.837 86.2464 372.787 85.8964 372.087 cv
85.5324 371.387 85.0004 371.037 84.2864 371.037 cv
84.2864 369.945 mo
85.4204 369.945 86.2884 370.407 86.9044 371.303 cv
87.5064 372.213 87.8144 373.529 87.8144 375.237 cv
87.8144 376.959 87.5064 378.275 86.9044 379.171 cv
86.2884 380.067 85.4204 380.515 84.2864 380.515 cv
83.1384 380.515 82.2564 380.067 81.6544 379.171 cv
81.0524 378.275 80.7584 376.959 80.7584 375.237 cv
80.7584 373.529 81.0524 372.213 81.6544 371.303 cv
82.2564 370.407 83.1384 369.945 84.2864 369.945 cv
f
90.2365 378.597 mo
91.6785 378.597 li
91.6785 380.333 li
90.2365 380.333 li
90.2365 378.597 li
f
97.6424 371.037 mo
96.9284 371.037 96.3964 371.387 96.0324 372.087 cv
95.6684 372.787 95.5004 373.837 95.5004 375.237 cv
95.5004 376.637 95.6684 377.687 96.0324 378.387 cv
96.3964 379.087 96.9284 379.437 97.6424 379.437 cv
98.3564 379.437 98.8884 379.087 99.2524 378.387 cv
99.6024 377.687 99.7844 376.637 99.7844 375.237 cv
99.7844 373.837 99.6024 372.787 99.2524 372.087 cv
98.8884 371.387 98.3564 371.037 97.6424 371.037 cv
97.6424 369.945 mo
98.7764 369.945 99.6444 370.407 100.26 371.303 cv
100.862 372.213 101.17 373.529 101.17 375.237 cv
101.17 376.959 100.862 378.275 100.26 379.171 cv
99.6444 380.067 98.7764 380.515 97.6424 380.515 cv
96.4944 380.515 95.6124 380.067 95.0104 379.171 cv
94.4084 378.275 94.1144 376.959 94.1144 375.237 cv
94.1144 373.529 94.4084 372.213 95.0104 371.303 cv
95.6124 370.407 96.4944 369.945 97.6424 369.945 cv
f
gsave
90 362.693 mo
648 362.693 li
648 48.9023 li
90 48.9023 li
90 362.693 li
clp
202.423 362.693 mo
201.623 362.693 li
201.623 355.193 li
202.423 355.193 li
202.423 362.693 li
202.423 302.424 mo
201.623 302.424 li
201.623 267.436 li
202.423 267.436 li
202.423 302.424 li
202.423 266.636 mo
201.623 266.636 li
201.623 213.239 li
202.423 213.239 li
202.423 266.636 li
202.423 212.44 mo
201.623 212.44 li
201.623 159.043 li
202.423 159.043 li
202.423 212.44 li
202.423 158.243 mo
201.623 158.243 li
201.623 104.846 li
202.423 104.846 li
202.423 158.243 li
202.423 104.046 mo
201.623 104.046 li
201.623 50.6494 li
202.423 50.6494 li
202.423 104.046 li
202.423 49.8495 mo
201.623 49.8495 li
201.623 48.9023 li
202.423 48.9023 li
202.423 49.8495 li
0 0 0 .245548 cmyk
f
grestore
202.023 362.693 mo
202.023 366.193 li
f
202.023 362.693 mo
202.023 366.193 li
@
195.342 371.037 mo
194.628 371.037 194.096 371.387 193.732 372.087 cv
193.368 372.787 193.2 373.837 193.2 375.237 cv
193.2 376.637 193.368 377.687 193.732 378.387 cv
194.096 379.087 194.628 379.437 195.342 379.437 cv
196.056 379.437 196.588 379.087 196.952 378.387 cv
197.302 377.687 197.484 376.637 197.484 375.237 cv
197.484 373.837 197.302 372.787 196.952 372.087 cv
196.588 371.387 196.056 371.037 195.342 371.037 cv
195.342 369.945 mo
196.476 369.945 197.344 370.407 197.96 371.303 cv
198.562 372.213 198.87 373.529 198.87 375.237 cv
198.87 376.959 198.562 378.275 197.96 379.171 cv
197.344 380.067 196.476 380.515 195.342 380.515 cv
194.194 380.515 193.312 380.067 192.71 379.171 cv
192.108 378.275 191.814 376.959 191.814 375.237 cv
191.814 373.529 192.108 372.213 192.71 371.303 cv
193.312 370.407 194.194 369.945 195.342 369.945 cv
f
201.292 378.597 mo
202.734 378.597 li
202.734 380.333 li
201.292 380.333 li
201.292 378.597 li
f
206.934 379.171 mo
211.75 379.171 li
211.75 380.333 li
205.268 380.333 li
205.268 379.171 li
205.786 378.639 206.5 377.911 207.41 376.987 cv
208.306 376.077 208.88 375.489 209.118 375.223 cv
209.566 374.733 209.874 374.313 210.042 373.963 cv
210.21 373.627 210.308 373.277 210.308 372.941 cv
210.308 372.409 210.112 371.961 209.734 371.625 cv
209.356 371.289 208.866 371.107 208.25 371.107 cv
207.816 371.107 207.354 371.191 206.878 371.331 cv
206.402 371.485 205.884 371.709 205.338 372.017 cv
205.338 370.617 li
205.898 370.393 206.416 370.225 206.892 370.113 cv
207.368 370.001 207.816 369.945 208.222 369.945 cv
209.272 369.945 210.112 370.211 210.742 370.743 cv
211.372 371.275 211.694 371.975 211.694 372.857 cv
211.694 373.277 211.61 373.683 211.456 374.047 cv
211.302 374.425 211.022 374.873 210.602 375.377 cv
210.49 375.517 210.126 375.895 209.51 376.525 cv
208.894 377.155 208.04 378.037 206.934 379.171 cv
f
gsave
90 362.693 mo
648 362.693 li
648 48.9023 li
90 48.9023 li
90 362.693 li
clp
313.478 362.693 mo
312.678 362.693 li
312.678 321.633 li
313.478 321.633 li
313.478 362.693 li
313.478 320.833 mo
312.678 320.833 li
312.678 267.436 li
313.478 267.436 li
313.478 320.833 li
313.478 266.636 mo
312.678 266.636 li
312.678 213.239 li
313.478 213.239 li
313.478 266.636 li
313.478 212.44 mo
312.678 212.44 li
312.678 159.043 li
313.478 159.043 li
313.478 212.44 li
313.478 158.243 mo
312.678 158.243 li
312.678 104.846 li
313.478 104.846 li
313.478 158.243 li
313.478 104.046 mo
312.678 104.046 li
312.678 50.6494 li
313.478 50.6494 li
313.478 104.046 li
313.478 49.8495 mo
312.678 49.8495 li
312.678 48.9023 li
313.478 48.9023 li
313.478 49.8495 li
0 0 0 .245548 cmyk
f
grestore
313.078 362.693 mo
313.078 366.193 li
f
313.078 362.693 mo
313.078 366.193 li
@
306.397 371.037 mo
305.683 371.037 305.151 371.387 304.787 372.087 cv
304.423 372.787 304.255 373.837 304.255 375.237 cv
304.255 376.637 304.423 377.687 304.787 378.387 cv
305.151 379.087 305.683 379.437 306.397 379.437 cv
307.111 379.437 307.643 379.087 308.007 378.387 cv
308.357 377.687 308.539 376.637 308.539 375.237 cv
308.539 373.837 308.357 372.787 308.007 372.087 cv
307.643 371.387 307.111 371.037 306.397 371.037 cv
306.397 369.945 mo
307.531 369.945 308.399 370.407 309.015 371.303 cv
309.617 372.213 309.925 373.529 309.925 375.237 cv
309.925 376.959 309.617 378.275 309.015 379.171 cv
308.399 380.067 307.531 380.515 306.397 380.515 cv
305.249 380.515 304.367 380.067 303.765 379.171 cv
303.163 378.275 302.869 376.959 302.869 375.237 cv
302.869 373.529 303.163 372.213 303.765 371.303 cv
304.367 370.407 305.249 369.945 306.397 369.945 cv
f
312.347 378.597 mo
313.789 378.597 li
313.789 380.333 li
312.347 380.333 li
312.347 378.597 li
f
320.593 371.331 mo
317.107 376.777 li
320.593 376.777 li
320.593 371.331 li
320.229 370.127 mo
321.965 370.127 li
321.965 376.777 li
323.421 376.777 li
323.421 377.925 li
321.965 377.925 li
321.965 380.333 li
320.593 380.333 li
320.593 377.925 li
315.987 377.925 li
315.987 376.595 li
320.229 370.127 li
f
gsave
90 362.693 mo
648 362.693 li
648 48.9023 li
90 48.9023 li
90 362.693 li
clp
424.534 362.693 mo
423.734 362.693 li
423.734 321.633 li
424.534 321.633 li
424.534 362.693 li
424.534 320.833 mo
423.734 320.833 li
423.734 267.436 li
424.534 267.436 li
424.534 320.833 li
424.534 266.636 mo
423.734 266.636 li
423.734 213.239 li
424.534 213.239 li
424.534 266.636 li
424.534 212.44 mo
423.734 212.44 li
423.734 159.043 li
424.534 159.043 li
424.534 212.44 li
424.534 158.243 mo
423.734 158.243 li
423.734 104.846 li
424.534 104.846 li
424.534 158.243 li
424.534 104.046 mo
423.734 104.046 li
423.734 50.6494 li
424.534 50.6494 li
424.534 104.046 li
424.534 49.8495 mo
423.734 49.8495 li
423.734 48.9023 li
424.534 48.9023 li
424.534 49.8495 li
0 0 0 .245548 cmyk
f
grestore
424.134 362.693 mo
424.134 366.193 li
f
424.134 362.693 mo
424.134 366.193 li
@
417.453 371.037 mo
416.739 371.037 416.207 371.387 415.843 372.087 cv
415.479 372.787 415.311 373.837 415.311 375.237 cv
415.311 376.637 415.479 377.687 415.843 378.387 cv
416.207 379.087 416.739 379.437 417.453 379.437 cv
418.167 379.437 418.699 379.087 419.063 378.387 cv
419.413 377.687 419.595 376.637 419.595 375.237 cv
419.595 373.837 419.413 372.787 419.063 372.087 cv
418.699 371.387 418.167 371.037 417.453 371.037 cv
417.453 369.945 mo
418.587 369.945 419.455 370.407 420.071 371.303 cv
420.673 372.213 420.981 373.529 420.981 375.237 cv
420.981 376.959 420.673 378.275 420.071 379.171 cv
419.455 380.067 418.587 380.515 417.453 380.515 cv
416.305 380.515 415.423 380.067 414.821 379.171 cv
414.219 378.275 413.925 376.959 413.925 375.237 cv
413.925 373.529 414.219 372.213 414.821 371.303 cv
415.423 370.407 416.305 369.945 417.453 369.945 cv
f
423.403 378.597 mo
424.845 378.597 li
424.845 380.333 li
423.403 380.333 li
423.403 378.597 li
f
430.977 374.677 mo
430.361 374.677 429.871 374.901 429.507 375.321 cv
429.143 375.741 428.961 376.329 428.961 377.057 cv
428.961 377.799 429.143 378.387 429.507 378.807 cv
429.871 379.227 430.361 379.437 430.977 379.437 cv
431.593 379.437 432.083 379.227 432.447 378.807 cv
432.811 378.387 432.993 377.799 432.993 377.057 cv
432.993 376.329 432.811 375.741 432.447 375.321 cv
432.083 374.901 431.593 374.677 430.977 374.677 cv
433.721 370.351 mo
433.721 371.611 li
433.371 371.443 433.021 371.317 432.671 371.233 cv
432.307 371.149 431.957 371.107 431.621 371.107 cv
430.697 371.107 429.997 371.415 429.521 372.031 cv
429.045 372.647 428.765 373.585 428.709 374.817 cv
428.975 374.425 429.311 374.117 429.717 373.907 cv
430.123 373.697 430.571 373.585 431.061 373.585 cv
432.083 373.585 432.895 373.907 433.483 374.523 cv
434.071 375.139 434.379 375.993 434.379 377.057 cv
434.379 378.107 434.057 378.947 433.441 379.577 cv
432.825 380.207 431.999 380.515 430.977 380.515 cv
429.801 380.515 428.891 380.067 428.275 379.171 cv
427.645 378.275 427.337 376.959 427.337 375.237 cv
427.337 373.627 427.715 372.339 428.485 371.387 cv
429.241 370.435 430.277 369.945 431.565 369.945 cv
431.901 369.945 432.251 369.987 432.615 370.043 cv
432.965 370.113 433.329 370.211 433.721 370.351 cv
f
gsave
90 362.693 mo
648 362.693 li
648 48.9023 li
90 48.9023 li
90 362.693 li
clp
535.589 362.693 mo
534.789 362.693 li
534.789 321.633 li
535.589 321.633 li
535.589 362.693 li
535.589 320.833 mo
534.789 320.833 li
534.789 267.436 li
535.589 267.436 li
535.589 320.833 li
535.589 266.636 mo
534.789 266.636 li
534.789 213.239 li
535.589 213.239 li
535.589 266.636 li
535.589 212.44 mo
534.789 212.44 li
534.789 159.043 li
535.589 159.043 li
535.589 212.44 li
535.589 158.243 mo
534.789 158.243 li
534.789 104.846 li
535.589 104.846 li
535.589 158.243 li
535.589 104.046 mo
534.789 104.046 li
534.789 50.6494 li
535.589 50.6494 li
535.589 104.046 li
535.589 49.8495 mo
534.789 49.8495 li
534.789 48.9023 li
535.589 48.9023 li
535.589 49.8495 li
0 0 0 .245548 cmyk
f
grestore
535.189 362.693 mo
535.189 366.193 li
f
535.189 362.693 mo
535.189 366.193 li
@
528.508 371.037 mo
527.794 371.037 527.262 371.387 526.898 372.087 cv
526.534 372.787 526.366 373.837 526.366 375.237 cv
526.366 376.637 526.534 377.687 526.898 378.387 cv
527.262 379.087 527.794 379.437 528.508 379.437 cv
529.222 379.437 529.754 379.087 530.118 378.387 cv
530.468 377.687 530.65 376.637 530.65 375.237 cv
530.65 373.837 530.468 372.787 530.118 372.087 cv
529.754 371.387 529.222 371.037 528.508 371.037 cv
528.508 369.945 mo
529.642 369.945 530.51 370.407 531.126 371.303 cv
531.728 372.213 532.036 373.529 532.036 375.237 cv
532.036 376.959 531.728 378.275 531.126 379.171 cv
530.51 380.067 529.642 380.515 528.508 380.515 cv
527.36 380.515 526.478 380.067 525.876 379.171 cv
525.274 378.275 524.98 376.959 524.98 375.237 cv
524.98 373.529 525.274 372.213 525.876 371.303 cv
526.478 370.407 527.36 369.945 528.508 369.945 cv
f
534.458 378.597 mo
535.9 378.597 li
535.9 380.333 li
534.458 380.333 li
534.458 378.597 li
f
541.864 375.489 mo
541.206 375.489 540.688 375.671 540.31 376.021 cv
539.932 376.371 539.75 376.847 539.75 377.463 cv
539.75 378.079 539.932 378.569 540.31 378.919 cv
540.688 379.269 541.206 379.437 541.864 379.437 cv
542.508 379.437 543.026 379.269 543.404 378.905 cv
543.782 378.555 543.978 378.079 543.978 377.463 cv
543.978 376.847 543.782 376.371 543.418 376.021 cv
543.04 375.671 542.522 375.489 541.864 375.489 cv
540.478 374.901 mo
539.89 374.761 539.428 374.481 539.092 374.075 cv
538.756 373.669 538.602 373.179 538.602 372.591 cv
538.602 371.779 538.882 371.135 539.47 370.659 cv
540.044 370.183 540.842 369.945 541.864 369.945 cv
542.872 369.945 543.67 370.183 544.258 370.659 cv
544.832 371.135 545.126 371.779 545.126 372.591 cv
545.126 373.179 544.958 373.669 544.622 374.075 cv
544.286 374.481 543.838 374.761 543.25 374.901 cv
543.908 375.055 544.426 375.363 544.804 375.811 cv
545.168 376.259 545.364 376.819 545.364 377.463 cv
545.364 378.457 545.056 379.213 544.454 379.731 cv
543.838 380.263 542.984 380.515 541.864 380.515 cv
540.73 380.515 539.862 380.263 539.26 379.731 cv
538.658 379.213 538.364 378.457 538.364 377.463 cv
538.364 376.819 538.546 376.259 538.924 375.811 cv
539.288 375.363 539.806 375.055 540.478 374.901 cv
539.974 372.717 mo
539.974 373.249 540.128 373.669 540.464 373.963 cv
540.8 374.257 541.262 374.397 541.864 374.397 cv
542.452 374.397 542.914 374.257 543.25 373.963 cv
543.586 373.669 543.754 373.249 543.754 372.717 cv
543.754 372.185 543.586 371.779 543.25 371.485 cv
542.914 371.191 542.452 371.037 541.864 371.037 cv
541.262 371.037 540.8 371.191 540.464 371.485 cv
540.128 371.779 539.974 372.185 539.974 372.717 cv
f
gsave
90 362.693 mo
648 362.693 li
648 48.9023 li
90 48.9023 li
90 362.693 li
clp
646.645 320.833 mo
645.845 320.833 li
645.845 267.436 li
646.645 267.436 li
646.645 320.833 li
646.645 266.636 mo
645.845 266.636 li
645.845 213.239 li
646.645 213.239 li
646.645 266.636 li
646.645 212.44 mo
645.845 212.44 li
645.845 159.043 li
646.645 159.043 li
646.645 212.44 li
646.645 158.243 mo
645.845 158.243 li
645.845 104.846 li
646.645 104.846 li
646.645 158.243 li
646.645 104.046 mo
645.845 104.046 li
645.845 50.6494 li
646.645 50.6494 li
646.645 104.046 li
646.645 49.8495 mo
645.845 49.8495 li
645.845 48.9023 li
646.645 48.9023 li
646.645 49.8495 li
0 0 0 .245548 cmyk
f
646.645 362.693 mo
645.845 362.693 li
645.845 321.633 li
646.645 321.633 li
646.645 362.693 li
f
grestore
646.245 362.693 mo
646.245 366.193 li
f
646.245 362.693 mo
646.245 366.193 li
@
636.848 379.171 mo
639.102 379.171 li
639.102 371.387 li
636.652 371.877 li
636.652 370.617 li
639.088 370.127 li
640.474 370.127 li
640.474 379.171 li
642.728 379.171 li
642.728 380.333 li
636.848 380.333 li
636.848 379.171 li
f
645.514 378.597 mo
646.956 378.597 li
646.956 380.333 li
645.514 380.333 li
645.514 378.597 li
f
652.92 371.037 mo
652.206 371.037 651.674 371.387 651.31 372.087 cv
650.946 372.787 650.778 373.837 650.778 375.237 cv
650.778 376.637 650.946 377.687 651.31 378.387 cv
651.674 379.087 652.206 379.437 652.92 379.437 cv
653.634 379.437 654.166 379.087 654.53 378.387 cv
654.88 377.687 655.062 376.637 655.062 375.237 cv
655.062 373.837 654.88 372.787 654.53 372.087 cv
654.166 371.387 653.634 371.037 652.92 371.037 cv
652.92 369.945 mo
654.054 369.945 654.922 370.407 655.538 371.303 cv
656.14 372.213 656.448 373.529 656.448 375.237 cv
656.448 376.959 656.14 378.275 655.538 379.171 cv
654.922 380.067 654.054 380.515 652.92 380.515 cv
651.772 380.515 650.89 380.067 650.288 379.171 cv
649.686 378.275 649.392 376.959 649.392 375.237 cv
649.392 373.529 649.686 372.213 650.288 371.303 cv
650.89 370.407 651.772 369.945 652.92 369.945 cv
f
324.498 400.815 mo
324.282 400.833 li
324.21 400.833 324.12 400.833 323.976 400.833 cv
322.32 400.833 321.042 400.365 320.124 399.429 cv
319.188 398.493 318.738 397.197 318.738 395.541 cv
318.738 394.569 318.9 393.597 319.26 392.607 cv
319.62 391.635 320.106 390.735 320.754 389.943 cv
321.474 389.043 322.302 388.377 323.22 387.927 cv
324.138 387.477 325.146 387.243 326.262 387.243 cv
327.864 387.243 329.124 387.729 330.06 388.665 cv
330.978 389.619 331.446 390.915 331.446 392.535 cv
331.446 394.299 330.96 395.919 329.988 397.377 cv
329.016 398.853 327.756 399.879 326.208 400.473 cv
327.99 402.903 li
326.01 402.903 li
324.498 400.815 li
326.208 388.683 mo
325.236 388.683 324.372 388.935 323.634 389.403 cv
322.878 389.871 322.23 390.591 321.69 391.545 cv
321.33 392.157 321.06 392.823 320.88 393.507 cv
320.7 394.209 320.61 394.911 320.61 395.595 cv
320.61 396.819 320.898 397.773 321.474 398.421 cv
322.05 399.087 322.878 399.411 323.958 399.411 cv
324.912 399.411 325.776 399.177 326.532 398.691 cv
327.288 398.223 327.918 397.503 328.458 396.567 cv
328.818 395.937 329.088 395.271 329.268 394.569 cv
329.448 393.885 329.556 393.183 329.556 392.499 cv
329.556 391.293 329.25 390.357 328.674 389.691 cv
328.08 389.025 327.252 388.683 326.208 388.683 cv
f
338.191 393.976 mo
338.014 394.921 li
336.931 394.921 li
336.515 394.921 336.213 395.009 336.036 395.173 cv
335.847 395.337 335.709 395.627 335.62 396.055 cv
335.494 396.66 li
337.359 396.66 li
337.195 397.542 li
335.331 397.542 li
334.159 403.552 li
333.025 403.552 li
334.197 397.542 li
333.113 397.542 li
333.277 396.66 li
334.36 396.66 li
334.449 396.181 li
334.6 395.375 334.877 394.795 335.268 394.468 cv
335.658 394.14 336.276 393.976 337.12 393.976 cv
338.191 393.976 li
f
342.223 397.706 mo
342.097 397.655 341.971 397.605 341.82 397.567 cv
341.669 397.542 341.518 397.517 341.354 397.517 cv
340.749 397.517 340.22 397.756 339.766 398.21 cv
339.313 398.663 339.023 399.281 338.872 400.037 cv
338.179 403.552 li
337.045 403.552 li
338.393 396.66 li
339.527 396.66 li
339.313 397.731 li
339.603 397.34 339.955 397.038 340.384 396.824 cv
340.8 396.61 341.241 396.496 341.719 396.496 cv
341.833 396.496 341.946 396.509 342.072 396.521 cv
342.198 396.534 342.312 396.559 342.438 396.584 cv
342.223 397.706 li
f
348.55 399.621 mo
347.782 403.552 li
346.648 403.552 li
346.862 402.506 li
346.522 402.922 346.144 403.225 345.715 403.426 cv
345.287 403.615 344.821 403.716 344.304 403.716 cv
343.712 403.716 343.233 403.54 342.855 403.187 cv
342.477 402.834 342.301 402.38 342.301 401.813 cv
342.301 401.007 342.616 400.377 343.258 399.911 cv
343.901 399.445 344.783 399.205 345.917 399.205 cv
347.492 399.205 li
347.555 398.903 li
347.567 398.802 li
347.58 398.613 li
347.58 398.248 347.429 397.958 347.126 397.756 cv
346.824 397.555 346.408 397.454 345.879 397.454 cv
345.501 397.454 345.123 397.504 344.745 397.605 cv
344.354 397.706 343.951 397.844 343.548 398.021 cv
343.75 396.975 li
344.178 396.824 344.594 396.698 344.997 396.622 cv
345.4 396.547 345.803 396.496 346.181 396.496 cv
346.988 396.496 347.605 396.673 348.034 397.025 cv
348.462 397.378 348.676 397.895 348.676 398.563 cv
348.676 398.701 348.664 398.865 348.638 399.041 cv
348.613 399.23 348.588 399.419 348.55 399.621 cv
347.328 400.087 mo
346.194 400.087 li
345.262 400.087 344.581 400.213 344.14 400.465 cv
343.687 400.717 343.472 401.095 343.472 401.612 cv
343.472 401.977 343.586 402.267 343.813 402.469 cv
344.039 402.67 344.354 402.771 344.758 402.771 cv
345.362 402.771 345.904 402.557 346.358 402.116 cv
346.811 401.675 347.126 401.083 347.278 400.339 cv
347.328 400.087 li
f
360.82 399.394 mo
360.014 403.552 li
358.88 403.552 li
359.673 399.432 li
359.699 399.256 359.724 399.104 359.749 398.978 cv
359.762 398.852 359.774 398.752 359.774 398.651 cv
359.774 398.285 359.661 397.996 359.459 397.794 cv
359.258 397.592 358.968 397.479 358.602 397.479 cv
358.048 397.479 357.557 397.693 357.128 398.096 cv
356.7 398.512 356.423 399.054 356.297 399.709 cv
355.541 403.552 li
354.407 403.552 li
355.213 399.432 li
355.238 399.281 355.263 399.142 355.289 399.016 cv
355.301 398.89 355.314 398.764 355.314 398.663 cv
355.314 398.285 355.2 397.996 354.999 397.794 cv
354.797 397.592 354.507 397.479 354.155 397.479 cv
353.6 397.479 353.096 397.693 352.668 398.096 cv
352.239 398.512 351.962 399.054 351.836 399.709 cv
351.08 403.552 li
349.946 403.552 li
351.294 396.66 li
352.428 396.66 li
352.214 397.731 li
352.517 397.328 352.869 397.025 353.285 396.811 cv
353.701 396.61 354.142 396.496 354.621 396.496 cv
355.112 396.496 355.515 396.635 355.843 396.887 cv
356.171 397.151 356.36 397.517 356.435 397.983 cv
356.775 397.504 357.179 397.126 357.632 396.874 cv
358.086 396.622 358.565 396.496 359.069 396.496 cv
359.648 396.496 360.102 396.673 360.429 397.013 cv
360.757 397.353 360.921 397.832 360.921 398.449 cv
360.921 398.588 360.908 398.739 360.896 398.903 cv
360.87 399.067 360.845 399.23 360.82 399.394 cv
f
367.84 399.495 mo
367.865 399.293 li
367.878 399.079 li
367.878 398.575 367.726 398.185 367.437 397.895 cv
367.134 397.605 366.744 397.454 366.24 397.454 cv
365.673 397.454 365.181 397.643 364.753 397.996 cv
364.324 398.348 363.997 398.852 363.77 399.495 cv
367.84 399.495 li
368.823 400.377 mo
363.556 400.377 li
363.531 400.541 363.505 400.667 363.505 400.755 cv
363.493 400.982 li
363.493 401.561 363.669 402.002 364.022 402.305 cv
364.375 402.62 364.866 402.771 365.509 402.771 cv
365.988 402.771 366.454 402.721 366.895 402.607 cv
367.336 402.506 367.752 402.343 368.13 402.116 cv
367.915 403.237 li
367.5 403.414 367.071 403.527 366.643 403.603 cv
366.214 403.678 365.773 403.716 365.332 403.716 cv
364.375 403.716 363.631 403.489 363.127 403.036 cv
362.611 402.582 362.359 401.939 362.359 401.095 cv
362.359 400.39 362.485 399.722 362.737 399.104 cv
362.989 398.487 363.367 397.933 363.871 397.441 cv
364.186 397.139 364.564 396.912 365.005 396.748 cv
365.446 396.584 365.912 396.496 366.416 396.496 cv
367.197 396.496 367.815 396.736 368.281 397.202 cv
368.734 397.668 368.974 398.298 368.974 399.079 cv
368.974 399.268 368.961 399.47 368.936 399.684 cv
368.911 399.911 368.873 400.138 368.823 400.377 cv
f
374.595 387.477 mo
376.089 387.477 li
371.517 402.255 li
370.023 402.255 li
374.595 387.477 li
f
382.586 400.815 mo
382.37 400.833 li
382.298 400.833 382.208 400.833 382.064 400.833 cv
380.408 400.833 379.13 400.365 378.212 399.429 cv
377.276 398.493 376.826 397.197 376.826 395.541 cv
376.826 394.569 376.988 393.597 377.348 392.607 cv
377.708 391.635 378.194 390.735 378.842 389.943 cv
379.562 389.043 380.39 388.377 381.308 387.927 cv
382.226 387.477 383.234 387.243 384.35 387.243 cv
385.952 387.243 387.212 387.729 388.148 388.665 cv
389.066 389.619 389.534 390.915 389.534 392.535 cv
389.534 394.299 389.048 395.919 388.076 397.377 cv
387.104 398.853 385.844 399.879 384.296 400.473 cv
386.078 402.903 li
384.098 402.903 li
382.586 400.815 li
384.296 388.683 mo
383.324 388.683 382.46 388.935 381.722 389.403 cv
380.966 389.871 380.318 390.591 379.778 391.545 cv
379.418 392.157 379.148 392.823 378.968 393.507 cv
378.788 394.209 378.698 394.911 378.698 395.595 cv
378.698 396.819 378.986 397.773 379.562 398.421 cv
380.138 399.087 380.966 399.411 382.046 399.411 cv
383 399.411 383.864 399.177 384.62 398.691 cv
385.376 398.223 386.006 397.503 386.546 396.567 cv
386.906 395.937 387.176 395.271 387.356 394.569 cv
387.536 393.885 387.644 393.183 387.644 392.499 cv
387.644 391.293 387.338 390.357 386.762 389.691 cv
386.168 389.025 385.34 388.683 384.296 388.683 cv
f
395.586 396.66 mo
395.409 397.542 li
393.154 397.542 li
392.423 401.284 li
392.398 401.423 392.373 401.536 392.36 401.637 cv
392.347 401.738 392.347 401.801 392.347 401.851 cv
392.347 402.116 392.423 402.305 392.587 402.431 cv
392.738 402.557 392.99 402.607 393.343 402.607 cv
394.489 402.607 li
394.3 403.552 li
393.217 403.552 li
392.536 403.552 392.032 403.426 391.705 403.162 cv
391.377 402.897 391.213 402.494 391.213 401.965 cv
391.213 401.876 391.213 401.776 391.226 401.662 cv
391.239 401.549 391.264 401.423 391.289 401.284 cv
392.02 397.542 li
391.062 397.542 li
391.239 396.66 li
392.184 396.66 li
392.562 394.707 li
393.696 394.707 li
393.318 396.66 li
395.586 396.66 li
f
398.397 403.716 mo
397.59 403.716 396.948 403.477 396.481 402.985 cv
396.003 402.494 395.776 401.813 395.776 400.944 cv
395.776 400.44 395.851 399.936 396.015 399.419 cv
396.166 398.903 396.38 398.462 396.645 398.109 cv
397.048 397.555 397.502 397.151 398.006 396.887 cv
398.51 396.635 399.077 396.496 399.707 396.496 cv
400.488 396.496 401.118 396.748 401.597 397.227 cv
402.076 397.718 402.328 398.361 402.328 399.142 cv
402.328 399.697 402.24 400.238 402.088 400.78 cv
401.924 401.322 401.71 401.763 401.458 402.116 cv
401.055 402.67 400.602 403.086 400.098 403.338 cv
399.594 403.59 399.027 403.716 398.397 403.716 cv
396.948 400.906 mo
396.948 401.536 397.074 402.002 397.338 402.305 cv
397.59 402.62 397.993 402.771 398.522 402.771 cv
399.279 402.771 399.896 402.443 400.4 401.776 cv
400.904 401.12 401.156 400.276 401.156 399.256 cv
401.156 398.663 401.017 398.21 400.753 397.907 cv
400.488 397.605 400.098 397.454 399.581 397.454 cv
399.152 397.454 398.762 397.555 398.434 397.756 cv
398.107 397.958 397.804 398.26 397.552 398.663 cv
397.351 398.966 397.199 399.319 397.099 399.709 cv
396.998 400.1 396.948 400.503 396.948 400.906 cv
f
408.235 396.66 mo
408.058 397.542 li
405.803 397.542 li
405.072 401.284 li
405.047 401.423 405.022 401.536 405.009 401.637 cv
404.997 401.738 404.997 401.801 404.997 401.851 cv
404.997 402.116 405.072 402.305 405.236 402.431 cv
405.387 402.557 405.639 402.607 405.992 402.607 cv
407.139 402.607 li
406.95 403.552 li
405.866 403.552 li
405.186 403.552 404.682 403.426 404.354 403.162 cv
404.026 402.897 403.863 402.494 403.863 401.965 cv
403.863 401.876 403.863 401.776 403.875 401.662 cv
403.888 401.549 403.913 401.423 403.938 401.284 cv
404.669 397.542 li
403.711 397.542 li
403.888 396.66 li
404.833 396.66 li
405.211 394.707 li
406.345 394.707 li
405.967 396.66 li
408.235 396.66 li
f
414.612 399.621 mo
413.843 403.552 li
412.709 403.552 li
412.923 402.506 li
412.583 402.922 412.205 403.225 411.777 403.426 cv
411.348 403.615 410.882 403.716 410.365 403.716 cv
409.773 403.716 409.294 403.54 408.916 403.187 cv
408.538 402.834 408.362 402.38 408.362 401.813 cv
408.362 401.007 408.677 400.377 409.32 399.911 cv
409.962 399.445 410.844 399.205 411.978 399.205 cv
413.553 399.205 li
413.616 398.903 li
413.629 398.802 li
413.641 398.613 li
413.641 398.248 413.49 397.958 413.188 397.756 cv
412.885 397.555 412.47 397.454 411.94 397.454 cv
411.562 397.454 411.184 397.504 410.806 397.605 cv
410.416 397.706 410.013 397.844 409.609 398.021 cv
409.811 396.975 li
410.239 396.824 410.655 396.698 411.058 396.622 cv
411.462 396.547 411.865 396.496 412.243 396.496 cv
413.049 396.496 413.667 396.673 414.095 397.025 cv
414.523 397.378 414.738 397.895 414.738 398.563 cv
414.738 398.701 414.725 398.865 414.7 399.041 cv
414.674 399.23 414.649 399.419 414.612 399.621 cv
413.389 400.087 mo
412.255 400.087 li
411.323 400.087 410.643 400.213 410.202 400.465 cv
409.748 400.717 409.534 401.095 409.534 401.612 cv
409.534 401.977 409.647 402.267 409.874 402.469 cv
410.101 402.67 410.416 402.771 410.819 402.771 cv
411.424 402.771 411.966 402.557 412.419 402.116 cv
412.873 401.675 413.188 401.083 413.339 400.339 cv
413.389 400.087 li
f
417.872 393.976 mo
419.006 393.976 li
417.142 403.552 li
416.008 403.552 li
417.872 393.976 li
f
gsave
90 362.693 mo
648 362.693 li
648 48.9023 li
90 48.9023 li
90 362.693 li
clp
gsave
648 321.633 mo
646.645 321.633 li
646.645 320.833 li
648 320.833 li
648 321.633 li
645.845 321.633 mo
535.589 321.633 li
535.589 320.833 li
645.845 320.833 li
645.845 321.633 li
534.789 321.633 mo
424.534 321.633 li
424.534 320.833 li
534.789 320.833 li
534.789 321.633 li
423.734 321.633 mo
313.478 321.633 li
313.478 320.833 li
423.734 320.833 li
423.734 321.633 li
312.678 321.633 mo
231.459 321.633 li
231.459 320.833 li
312.678 320.833 li
312.678 321.633 li
97.5 321.633 mo
91.3672 321.633 li
91.3672 320.833 li
97.5 320.833 li
97.5 321.633 li
90.5673 321.633 mo
90 321.633 li
90 320.833 li
90.5673 320.833 li
90.5673 321.633 li
clp
90 320.833 mo
648 320.833 li
648 321.633 li
90 321.633 li
cp
0 0 0 .245548 cmyk
f
grestore
91.3672 321.633 mo
90.5673 321.633 li
90.5673 320.833 li
91.3672 320.833 li
91.3672 321.633 li
0 0 0 .324956 cmyk
f
313.478 321.633 mo
312.678 321.633 li
312.678 320.833 li
313.478 320.833 li
313.478 321.633 li
f
424.534 321.633 mo
423.734 321.633 li
423.734 320.833 li
424.534 320.833 li
424.534 321.633 li
f
535.589 321.633 mo
534.789 321.633 li
534.789 320.833 li
535.589 320.833 li
535.589 321.633 li
f
646.645 321.633 mo
645.845 321.633 li
645.845 320.833 li
646.645 320.833 li
646.645 321.633 li
f
grestore
90 321.233 mo
86.5 321.233 li
f
90 321.233 mo
86.5 321.233 li
@
62.4665 325.391 mo
64.7205 325.391 li
64.7205 317.607 li
62.2705 318.097 li
62.2705 316.837 li
64.7065 316.347 li
66.0925 316.347 li
66.0925 325.391 li
68.3465 325.391 li
68.3465 326.553 li
62.4665 326.553 li
62.4665 325.391 li
f
71.1325 324.817 mo
72.5745 324.817 li
72.5745 326.553 li
71.1325 326.553 li
71.1325 324.817 li
f
78.5384 317.257 mo
77.8244 317.257 77.2924 317.607 76.9284 318.307 cv
76.5644 319.007 76.3964 320.057 76.3964 321.457 cv
76.3964 322.857 76.5644 323.907 76.9284 324.607 cv
77.2924 325.307 77.8244 325.657 78.5384 325.657 cv
79.2524 325.657 79.7844 325.307 80.1484 324.607 cv
80.4984 323.907 80.6804 322.857 80.6804 321.457 cv
80.6804 320.057 80.4984 319.007 80.1484 318.307 cv
79.7844 317.607 79.2524 317.257 78.5384 317.257 cv
78.5384 316.165 mo
79.6724 316.165 80.5404 316.627 81.1564 317.523 cv
81.7584 318.433 82.0664 319.749 82.0664 321.457 cv
82.0664 323.179 81.7584 324.495 81.1564 325.391 cv
80.5404 326.287 79.6724 326.735 78.5384 326.735 cv
77.3904 326.735 76.5084 326.287 75.9064 325.391 cv
75.3044 324.495 75.0104 323.179 75.0104 321.457 cv
75.0104 319.749 75.3044 318.433 75.9064 317.523 cv
76.5084 316.627 77.3904 316.165 78.5384 316.165 cv
f
50.484 321.583 mo
59.248 321.583 li
59.248 322.745 li
50.484 322.745 li
50.484 321.583 li
f
gsave
90 362.693 mo
648 362.693 li
648 48.9023 li
90 48.9023 li
90 362.693 li
clp
648 267.436 mo
646.645 267.436 li
646.645 266.636 li
648 266.636 li
648 267.436 li
645.845 267.436 mo
535.589 267.436 li
535.589 266.636 li
645.845 266.636 li
645.845 267.436 li
534.789 267.436 mo
424.534 267.436 li
424.534 266.636 li
534.789 266.636 li
534.789 267.436 li
423.734 267.436 mo
313.478 267.436 li
313.478 266.636 li
423.734 266.636 li
423.734 267.436 li
312.678 267.436 mo
202.423 267.436 li
202.423 266.636 li
312.678 266.636 li
312.678 267.436 li
201.623 267.436 mo
91.3672 267.436 li
91.3672 266.636 li
201.623 266.636 li
201.623 267.436 li
90.5673 267.436 mo
90 267.436 li
90 266.636 li
90.5673 266.636 li
90.5673 267.436 li
0 0 0 .245548 cmyk
f
91.3672 267.436 mo
90.5673 267.436 li
90.5673 266.636 li
91.3672 266.636 li
91.3672 267.436 li
0 0 0 .324956 cmyk
f
202.423 267.436 mo
201.623 267.436 li
201.623 266.636 li
202.423 266.636 li
202.423 267.436 li
f
313.478 267.436 mo
312.678 267.436 li
312.678 266.636 li
313.478 266.636 li
313.478 267.436 li
f
424.534 267.436 mo
423.734 267.436 li
423.734 266.636 li
424.534 266.636 li
424.534 267.436 li
f
535.589 267.436 mo
534.789 267.436 li
534.789 266.636 li
535.589 266.636 li
535.589 267.436 li
f
646.645 267.436 mo
645.845 267.436 li
645.845 266.636 li
646.645 266.636 li
646.645 267.436 li
f
grestore
90 267.036 mo
86.5 267.036 li
f
90 267.036 mo
86.5 267.036 li
@
65.1825 263.061 mo
64.4685 263.061 63.9365 263.411 63.5725 264.111 cv
63.2085 264.811 63.0405 265.861 63.0405 267.261 cv
63.0405 268.661 63.2085 269.711 63.5725 270.411 cv
63.9365 271.111 64.4685 271.461 65.1825 271.461 cv
65.8965 271.461 66.4285 271.111 66.7925 270.411 cv
67.1425 269.711 67.3245 268.661 67.3245 267.261 cv
67.3245 265.861 67.1425 264.811 66.7925 264.111 cv
66.4285 263.411 65.8965 263.061 65.1825 263.061 cv
65.1825 261.969 mo
66.3165 261.969 67.1845 262.431 67.8005 263.327 cv
68.4025 264.237 68.7105 265.553 68.7105 267.261 cv
68.7105 268.983 68.4025 270.299 67.8005 271.195 cv
67.1845 272.091 66.3165 272.539 65.1825 272.539 cv
64.0345 272.539 63.1525 272.091 62.5505 271.195 cv
61.9485 270.299 61.6545 268.983 61.6545 267.261 cv
61.6545 265.553 61.9485 264.237 62.5505 263.327 cv
63.1525 262.431 64.0345 261.969 65.1825 261.969 cv
f
71.1325 270.621 mo
72.5745 270.621 li
72.5745 272.357 li
71.1325 272.357 li
71.1325 270.621 li
f
78.5384 267.513 mo
77.8804 267.513 77.3624 267.695 76.9844 268.045 cv
76.6064 268.395 76.4244 268.871 76.4244 269.487 cv
76.4244 270.103 76.6064 270.593 76.9844 270.943 cv
77.3624 271.293 77.8804 271.461 78.5384 271.461 cv
79.1824 271.461 79.7004 271.293 80.0784 270.929 cv
80.4564 270.579 80.6524 270.103 80.6524 269.487 cv
80.6524 268.871 80.4564 268.395 80.0924 268.045 cv
79.7144 267.695 79.1964 267.513 78.5384 267.513 cv
77.1524 266.925 mo
76.5644 266.785 76.1024 266.505 75.7664 266.099 cv
75.4304 265.693 75.2764 265.203 75.2764 264.615 cv
75.2764 263.803 75.5564 263.159 76.1444 262.683 cv
76.7184 262.207 77.5164 261.969 78.5384 261.969 cv
79.5464 261.969 80.3444 262.207 80.9324 262.683 cv
81.5064 263.159 81.8004 263.803 81.8004 264.615 cv
81.8004 265.203 81.6324 265.693 81.2964 266.099 cv
80.9604 266.505 80.5124 266.785 79.9244 266.925 cv
80.5824 267.079 81.1004 267.387 81.4784 267.835 cv
81.8424 268.283 82.0384 268.843 82.0384 269.487 cv
82.0384 270.481 81.7304 271.237 81.1284 271.755 cv
80.5124 272.287 79.6584 272.539 78.5384 272.539 cv
77.4044 272.539 76.5364 272.287 75.9344 271.755 cv
75.3324 271.237 75.0384 270.481 75.0384 269.487 cv
75.0384 268.843 75.2204 268.283 75.5984 267.835 cv
75.9624 267.387 76.4804 267.079 77.1524 266.925 cv
76.6484 264.741 mo
76.6484 265.273 76.8024 265.693 77.1384 265.987 cv
77.4744 266.281 77.9364 266.421 78.5384 266.421 cv
79.1264 266.421 79.5884 266.281 79.9244 265.987 cv
80.2604 265.693 80.4284 265.273 80.4284 264.741 cv
80.4284 264.209 80.2604 263.803 79.9244 263.509 cv
79.5884 263.215 79.1264 263.061 78.5384 263.061 cv
77.9364 263.061 77.4744 263.215 77.1384 263.509 cv
76.8024 263.803 76.6484 264.209 76.6484 264.741 cv
f
50.484 267.387 mo
59.248 267.387 li
59.248 268.549 li
50.484 268.549 li
50.484 267.387 li
f
gsave
90 362.693 mo
648 362.693 li
648 48.9023 li
90 48.9023 li
90 362.693 li
clp
648 213.239 mo
646.645 213.239 li
646.645 212.44 li
648 212.44 li
648 213.239 li
645.845 213.239 mo
535.589 213.239 li
535.589 212.44 li
645.845 212.44 li
645.845 213.239 li
534.789 213.239 mo
424.534 213.239 li
424.534 212.44 li
534.789 212.44 li
534.789 213.239 li
423.734 213.239 mo
313.478 213.239 li
313.478 212.44 li
423.734 212.44 li
423.734 213.239 li
312.678 213.239 mo
202.423 213.239 li
202.423 212.44 li
312.678 212.44 li
312.678 213.239 li
201.623 213.239 mo
91.3672 213.239 li
91.3672 212.44 li
201.623 212.44 li
201.623 213.239 li
90.5673 213.239 mo
90 213.239 li
90 212.44 li
90.5673 212.44 li
90.5673 213.239 li
0 0 0 .245548 cmyk
f
91.3672 213.239 mo
90.5673 213.239 li
90.5673 212.44 li
91.3672 212.44 li
91.3672 213.239 li
0 0 0 .324956 cmyk
f
202.423 213.239 mo
201.623 213.239 li
201.623 212.44 li
202.423 212.44 li
202.423 213.239 li
f
313.478 213.239 mo
312.678 213.239 li
312.678 212.44 li
313.478 212.44 li
313.478 213.239 li
f
424.534 213.239 mo
423.734 213.239 li
423.734 212.44 li
424.534 212.44 li
424.534 213.239 li
f
535.589 213.239 mo
534.789 213.239 li
534.789 212.44 li
535.589 212.44 li
535.589 213.239 li
f
646.645 213.239 mo
645.845 213.239 li
645.845 212.44 li
646.645 212.44 li
646.645 213.239 li
f
grestore
90 212.84 mo
86.5 212.84 li
f
90 212.84 mo
86.5 212.84 li
@
65.1825 208.864 mo
64.4685 208.864 63.9365 209.214 63.5725 209.914 cv
63.2085 210.614 63.0405 211.664 63.0405 213.064 cv
63.0405 214.464 63.2085 215.514 63.5725 216.214 cv
63.9365 216.914 64.4685 217.264 65.1825 217.264 cv
65.8965 217.264 66.4285 216.914 66.7925 216.214 cv
67.1425 215.514 67.3245 214.464 67.3245 213.064 cv
67.3245 211.664 67.1425 210.614 66.7925 209.914 cv
66.4285 209.214 65.8965 208.864 65.1825 208.864 cv
65.1825 207.772 mo
66.3165 207.772 67.1845 208.234 67.8005 209.13 cv
68.4025 210.04 68.7105 211.356 68.7105 213.064 cv
68.7105 214.786 68.4025 216.102 67.8005 216.998 cv
67.1845 217.894 66.3165 218.342 65.1825 218.342 cv
64.0345 218.342 63.1525 217.894 62.5505 216.998 cv
61.9485 216.102 61.6545 214.786 61.6545 213.064 cv
61.6545 211.356 61.9485 210.04 62.5505 209.13 cv
63.1525 208.234 64.0345 207.772 65.1825 207.772 cv
f
71.1325 216.424 mo
72.5745 216.424 li
72.5745 218.16 li
71.1325 218.16 li
71.1325 216.424 li
f
78.7064 212.504 mo
78.0904 212.504 77.6004 212.728 77.2364 213.148 cv
76.8724 213.568 76.6904 214.156 76.6904 214.884 cv
76.6904 215.626 76.8724 216.214 77.2364 216.634 cv
77.6004 217.054 78.0904 217.264 78.7064 217.264 cv
79.3224 217.264 79.8124 217.054 80.1764 216.634 cv
80.5404 216.214 80.7224 215.626 80.7224 214.884 cv
80.7224 214.156 80.5404 213.568 80.1764 213.148 cv
79.8124 212.728 79.3224 212.504 78.7064 212.504 cv
81.4504 208.178 mo
81.4504 209.438 li
81.1004 209.27 80.7504 209.144 80.4004 209.06 cv
80.0364 208.976 79.6864 208.934 79.3504 208.934 cv
78.4264 208.934 77.7264 209.242 77.2504 209.858 cv
76.7744 210.474 76.4944 211.412 76.4384 212.644 cv
76.7044 212.252 77.0404 211.944 77.4464 211.734 cv
77.8524 211.524 78.3004 211.412 78.7904 211.412 cv
79.8124 211.412 80.6244 211.734 81.2124 212.35 cv
81.8004 212.966 82.1084 213.82 82.1084 214.884 cv
82.1084 215.934 81.7864 216.774 81.1704 217.404 cv
80.5544 218.034 79.7284 218.342 78.7064 218.342 cv
77.5304 218.342 76.6204 217.894 76.0044 216.998 cv
75.3744 216.102 75.0664 214.786 75.0664 213.064 cv
75.0664 211.454 75.4444 210.166 76.2144 209.214 cv
76.9704 208.262 78.0064 207.772 79.2944 207.772 cv
79.6304 207.772 79.9804 207.814 80.3444 207.87 cv
80.6944 207.94 81.0584 208.038 81.4504 208.178 cv
f
50.484 213.19 mo
59.248 213.19 li
59.248 214.352 li
50.484 214.352 li
50.484 213.19 li
f
gsave
90 362.693 mo
648 362.693 li
648 48.9023 li
90 48.9023 li
90 362.693 li
clp
648 159.043 mo
646.645 159.043 li
646.645 158.243 li
648 158.243 li
648 159.043 li
645.845 159.043 mo
535.589 159.043 li
535.589 158.243 li
645.845 158.243 li
645.845 159.043 li
534.789 159.043 mo
424.534 159.043 li
424.534 158.243 li
534.789 158.243 li
534.789 159.043 li
423.734 159.043 mo
313.478 159.043 li
313.478 158.243 li
423.734 158.243 li
423.734 159.043 li
312.678 159.043 mo
202.423 159.043 li
202.423 158.243 li
312.678 158.243 li
312.678 159.043 li
201.623 159.043 mo
91.3672 159.043 li
91.3672 158.243 li
201.623 158.243 li
201.623 159.043 li
90.5673 159.043 mo
90 159.043 li
90 158.243 li
90.5673 158.243 li
90.5673 159.043 li
0 0 0 .245548 cmyk
f
91.3672 159.043 mo
90.5673 159.043 li
90.5673 158.243 li
91.3672 158.243 li
91.3672 159.043 li
0 0 0 .324956 cmyk
f
202.423 159.043 mo
201.623 159.043 li
201.623 158.243 li
202.423 158.243 li
202.423 159.043 li
f
313.478 159.043 mo
312.678 159.043 li
312.678 158.243 li
313.478 158.243 li
313.478 159.043 li
f
424.534 159.043 mo
423.734 159.043 li
423.734 158.243 li
424.534 158.243 li
424.534 159.043 li
f
535.589 159.043 mo
534.789 159.043 li
534.789 158.243 li
535.589 158.243 li
535.589 159.043 li
f
646.645 159.043 mo
645.845 159.043 li
645.845 158.243 li
646.645 158.243 li
646.645 159.043 li
f
grestore
90 158.643 mo
86.5 158.643 li
f
90 158.643 mo
86.5 158.643 li
@
65.1825 154.667 mo
64.4685 154.667 63.9365 155.017 63.5725 155.717 cv
63.2085 156.417 63.0405 157.467 63.0405 158.867 cv
63.0405 160.267 63.2085 161.317 63.5725 162.017 cv
63.9365 162.717 64.4685 163.067 65.1825 163.067 cv
65.8965 163.067 66.4285 162.717 66.7925 162.017 cv
67.1425 161.317 67.3245 160.267 67.3245 158.867 cv
67.3245 157.467 67.1425 156.417 66.7925 155.717 cv
66.4285 155.017 65.8965 154.667 65.1825 154.667 cv
65.1825 153.575 mo
66.3165 153.575 67.1845 154.037 67.8005 154.933 cv
68.4025 155.843 68.7105 157.159 68.7105 158.867 cv
68.7105 160.589 68.4025 161.905 67.8005 162.801 cv
67.1845 163.697 66.3165 164.145 65.1825 164.145 cv
64.0345 164.145 63.1525 163.697 62.5505 162.801 cv
61.9485 161.905 61.6545 160.589 61.6545 158.867 cv
61.6545 157.159 61.9485 155.843 62.5505 154.933 cv
63.1525 154.037 64.0345 153.575 65.1825 153.575 cv
f
71.1325 162.227 mo
72.5745 162.227 li
72.5745 163.963 li
71.1325 163.963 li
71.1325 162.227 li
f
79.3784 154.961 mo
75.8924 160.407 li
79.3784 160.407 li
79.3784 154.961 li
79.0144 153.757 mo
80.7504 153.757 li
80.7504 160.407 li
82.2064 160.407 li
82.2064 161.555 li
80.7504 161.555 li
80.7504 163.963 li
79.3784 163.963 li
79.3784 161.555 li
74.7724 161.555 li
74.7724 160.225 li
79.0144 153.757 li
f
50.484 158.993 mo
59.248 158.993 li
59.248 160.155 li
50.484 160.155 li
50.484 158.993 li
f
gsave
90 362.693 mo
648 362.693 li
648 48.9023 li
90 48.9023 li
90 362.693 li
clp
648 104.846 mo
646.645 104.846 li
646.645 104.046 li
648 104.046 li
648 104.846 li
645.845 104.846 mo
535.589 104.846 li
535.589 104.046 li
645.845 104.046 li
645.845 104.846 li
534.789 104.846 mo
424.534 104.846 li
424.534 104.046 li
534.789 104.046 li
534.789 104.846 li
423.734 104.846 mo
313.478 104.846 li
313.478 104.046 li
423.734 104.046 li
423.734 104.846 li
312.678 104.846 mo
202.423 104.846 li
202.423 104.046 li
312.678 104.046 li
312.678 104.846 li
201.623 104.846 mo
91.3672 104.846 li
91.3672 104.046 li
201.623 104.046 li
201.623 104.846 li
90.5673 104.846 mo
90 104.846 li
90 104.046 li
90.5673 104.046 li
90.5673 104.846 li
0 0 0 .245548 cmyk
f
91.3672 104.846 mo
90.5673 104.846 li
90.5673 104.046 li
91.3672 104.046 li
91.3672 104.846 li
0 0 0 .324956 cmyk
f
202.423 104.846 mo
201.623 104.846 li
201.623 104.046 li
202.423 104.046 li
202.423 104.846 li
f
313.478 104.846 mo
312.678 104.846 li
312.678 104.046 li
313.478 104.046 li
313.478 104.846 li
f
424.534 104.846 mo
423.734 104.846 li
423.734 104.046 li
424.534 104.046 li
424.534 104.846 li
f
535.589 104.846 mo
534.789 104.846 li
534.789 104.046 li
535.589 104.046 li
535.589 104.846 li
f
646.645 104.846 mo
645.845 104.846 li
645.845 104.046 li
646.645 104.046 li
646.645 104.846 li
f
grestore
90 104.446 mo
86.5 104.446 li
f
90 104.446 mo
86.5 104.446 li
@
65.1825 100.47 mo
64.4685 100.47 63.9365 100.82 63.5725 101.52 cv
63.2085 102.22 63.0405 103.27 63.0405 104.67 cv
63.0405 106.07 63.2085 107.12 63.5725 107.82 cv
63.9365 108.52 64.4685 108.87 65.1825 108.87 cv
65.8965 108.87 66.4285 108.52 66.7925 107.82 cv
67.1425 107.12 67.3245 106.07 67.3245 104.67 cv
67.3245 103.27 67.1425 102.22 66.7925 101.52 cv
66.4285 100.82 65.8965 100.47 65.1825 100.47 cv
65.1825 99.3784 mo
66.3165 99.3784 67.1845 99.8404 67.8005 100.736 cv
68.4025 101.646 68.7105 102.962 68.7105 104.67 cv
68.7105 106.392 68.4025 107.708 67.8005 108.604 cv
67.1845 109.5 66.3165 109.948 65.1825 109.948 cv
64.0345 109.948 63.1525 109.5 62.5505 108.604 cv
61.9485 107.708 61.6545 106.392 61.6545 104.67 cv
61.6545 102.962 61.9485 101.646 62.5505 100.736 cv
63.1525 99.8404 64.0345 99.3784 65.1825 99.3784 cv
f
71.1325 108.03 mo
72.5745 108.03 li
72.5745 109.766 li
71.1325 109.766 li
71.1325 108.03 li
f
76.7744 108.604 mo
81.5904 108.604 li
81.5904 109.766 li
75.1084 109.766 li
75.1084 108.604 li
75.6264 108.072 76.3404 107.344 77.2504 106.42 cv
78.1464 105.51 78.7204 104.922 78.9584 104.656 cv
79.4064 104.166 79.7144 103.746 79.8824 103.396 cv
80.0504 103.06 80.1484 102.71 80.1484 102.374 cv
80.1484 101.842 79.9524 101.394 79.5744 101.058 cv
79.1964 100.722 78.7064 100.54 78.0904 100.54 cv
77.6564 100.54 77.1944 100.624 76.7184 100.764 cv
76.2424 100.918 75.7244 101.142 75.1784 101.45 cv
75.1784 100.05 li
75.7384 99.8264 76.2564 99.6584 76.7324 99.5464 cv
77.2084 99.4344 77.6564 99.3784 78.0624 99.3784 cv
79.1124 99.3784 79.9524 99.6444 80.5824 100.176 cv
81.2124 100.708 81.5344 101.408 81.5344 102.29 cv
81.5344 102.71 81.4504 103.116 81.2964 103.48 cv
81.1424 103.858 80.8624 104.306 80.4424 104.81 cv
80.3304 104.95 79.9664 105.328 79.3504 105.958 cv
78.7344 106.588 77.8804 107.47 76.7744 108.604 cv
f
50.484 104.796 mo
59.248 104.796 li
59.248 105.958 li
50.484 105.958 li
50.484 104.796 li
f
gsave
90 362.693 mo
648 362.693 li
648 48.9023 li
90 48.9023 li
90 362.693 li
clp
648 50.6494 mo
646.645 50.6494 li
646.645 49.8495 li
648 49.8495 li
648 50.6494 li
645.845 50.6494 mo
535.589 50.6494 li
535.589 49.8495 li
645.845 49.8495 li
645.845 50.6494 li
534.789 50.6494 mo
424.534 50.6494 li
424.534 49.8495 li
534.789 49.8495 li
534.789 50.6494 li
423.734 50.6494 mo
313.478 50.6494 li
313.478 49.8495 li
423.734 49.8495 li
423.734 50.6494 li
312.678 50.6494 mo
202.423 50.6494 li
202.423 49.8495 li
312.678 49.8495 li
312.678 50.6494 li
201.623 50.6494 mo
91.3672 50.6494 li
91.3672 49.8495 li
201.623 49.8495 li
201.623 50.6494 li
90.5673 50.6494 mo
90 50.6494 li
90 49.8495 li
90.5673 49.8495 li
90.5673 50.6494 li
0 0 0 .245548 cmyk
f
91.3672 50.6494 mo
90.5673 50.6494 li
90.5673 49.8495 li
91.3672 49.8495 li
91.3672 50.6494 li
0 0 0 .324956 cmyk
f
202.423 50.6494 mo
201.623 50.6494 li
201.623 49.8495 li
202.423 49.8495 li
202.423 50.6494 li
f
313.478 50.6494 mo
312.678 50.6494 li
312.678 49.8495 li
313.478 49.8495 li
313.478 50.6494 li
f
424.534 50.6494 mo
423.734 50.6494 li
423.734 49.8495 li
424.534 49.8495 li
424.534 50.6494 li
f
535.589 50.6494 mo
534.789 50.6494 li
534.789 49.8495 li
535.589 49.8495 li
535.589 50.6494 li
f
646.645 50.6494 mo
645.845 50.6494 li
645.845 49.8495 li
646.645 49.8495 li
646.645 50.6494 li
f
grestore
90 50.2494 mo
86.5 50.2494 li
f
90 50.2494 mo
86.5 50.2494 li
@
65.1864 46.2737 mo
64.4724 46.2737 63.9404 46.6237 63.5764 47.3237 cv
63.2124 48.0237 63.0444 49.0737 63.0444 50.4737 cv
63.0444 51.8737 63.2124 52.9237 63.5764 53.6237 cv
63.9404 54.3237 64.4724 54.6737 65.1864 54.6737 cv
65.9004 54.6737 66.4324 54.3237 66.7964 53.6237 cv
67.1464 52.9237 67.3284 51.8737 67.3284 50.4737 cv
67.3284 49.0737 67.1464 48.0237 66.7964 47.3237 cv
66.4324 46.6237 65.9004 46.2737 65.1864 46.2737 cv
65.1864 45.1817 mo
66.3204 45.1817 67.1884 45.6437 67.8044 46.5397 cv
68.4064 47.4497 68.7144 48.7657 68.7144 50.4737 cv
68.7144 52.1957 68.4064 53.5117 67.8044 54.4077 cv
67.1884 55.3037 66.3204 55.7517 65.1864 55.7517 cv
64.0384 55.7517 63.1564 55.3037 62.5544 54.4077 cv
61.9524 53.5117 61.6584 52.1957 61.6584 50.4737 cv
61.6584 48.7657 61.9524 47.4497 62.5544 46.5397 cv
63.1564 45.6437 64.0384 45.1817 65.1864 45.1817 cv
f
71.1364 53.8337 mo
72.5784 53.8337 li
72.5784 55.5697 li
71.1364 55.5697 li
71.1364 53.8337 li
f
78.5423 46.2737 mo
77.8283 46.2737 77.2963 46.6237 76.9323 47.3237 cv
76.5683 48.0237 76.4003 49.0737 76.4003 50.4737 cv
76.4003 51.8737 76.5683 52.9237 76.9323 53.6237 cv
77.2963 54.3237 77.8283 54.6737 78.5423 54.6737 cv
79.2563 54.6737 79.7883 54.3237 80.1523 53.6237 cv
80.5023 52.9237 80.6843 51.8737 80.6843 50.4737 cv
80.6843 49.0737 80.5023 48.0237 80.1523 47.3237 cv
79.7883 46.6237 79.2563 46.2737 78.5423 46.2737 cv
78.5423 45.1817 mo
79.6763 45.1817 80.5443 45.6437 81.1603 46.5397 cv
81.7623 47.4497 82.0703 48.7657 82.0703 50.4737 cv
82.0703 52.1957 81.7623 53.5117 81.1603 54.4077 cv
80.5443 55.3037 79.6763 55.7517 78.5423 55.7517 cv
77.3943 55.7517 76.5123 55.3037 75.9103 54.4077 cv
75.3083 53.5117 75.0143 52.1957 75.0143 50.4737 cv
75.0143 48.7657 75.3083 47.4497 75.9103 46.5397 cv
76.5123 45.6437 77.3943 45.1817 78.5423 45.1817 cv
f
32.7798 230.118 mo
34.7328 230.118 li
34.7328 227.787 li
35.6148 227.787 li
35.6148 230.118 li
39.357 230.118 li
39.924 230.118 40.2894 230.042 40.4406 229.891 cv
40.6044 229.74 40.68 229.425 40.68 228.946 cv
40.68 227.787 li
41.625 227.787 li
41.625 228.946 li
41.625 229.828 41.4612 230.433 41.1336 230.76 cv
40.806 231.088 40.2138 231.252 39.357 231.252 cv
35.6148 231.252 li
35.6148 232.083 li
34.7328 232.083 li
34.7328 231.252 li
32.7798 231.252 li
32.7798 230.118 li
f
34.7328 226.299 mo
34.7328 225.165 li
41.625 225.165 li
41.625 226.299 li
34.7328 226.299 li
32.049 226.299 mo
32.049 225.165 li
33.4854 225.165 li
33.4854 226.299 li
32.049 226.299 li
f
40.5918 221.702 mo
44.2332 221.702 li
44.2332 222.836 li
34.7328 222.836 li
34.7328 221.702 li
35.7786 221.702 li
35.3754 221.475 35.073 221.173 34.8714 220.807 cv
34.6698 220.442 34.569 220.001 34.569 219.497 cv
34.569 218.665 34.9092 217.985 35.5644 217.456 cv
36.2322 216.939 37.1016 216.675 38.1852 216.675 cv
39.2688 216.675 40.1508 216.939 40.806 217.456 cv
41.4612 217.985 41.7888 218.665 41.7888 219.497 cv
41.7888 220.001 41.688 220.442 41.499 220.807 cv
41.31 221.173 41.0076 221.475 40.5918 221.702 cv
38.1852 217.846 mo
37.3536 217.846 36.711 218.023 36.2322 218.363 cv
35.7534 218.716 35.514 219.182 35.514 219.774 cv
35.514 220.379 35.7534 220.845 36.2322 221.185 cv
36.711 221.538 37.3536 221.702 38.1852 221.702 cv
39.0168 221.702 39.672 221.538 40.1508 221.185 cv
40.6296 220.845 40.8564 220.379 40.8564 219.774 cv
40.8564 219.182 40.6296 218.716 40.1508 218.363 cv
39.672 218.023 39.0168 217.846 38.1852 217.846 cv
f
25.0099 209.912 mo
26.3779 210.704 27.7099 211.28 29.0239 211.658 cv
30.3379 212.054 31.6699 212.234 33.0199 212.234 cv
34.3879 212.234 35.7199 212.054 37.0339 211.658 cv
38.3659 211.28 39.6799 210.704 41.0299 209.912 cv
41.0299 211.316 li
39.6439 212.198 38.3119 212.864 36.9799 213.296 cv
35.6479 213.728 34.3339 213.944 33.0199 213.944 cv
31.7239 213.944 30.4099 213.728 29.0779 213.296 cv
27.7459 212.864 26.3959 212.216 25.0099 211.316 cv
25.0099 209.912 li
f
30.3199 200.298 mo
24.9919 200.298 li
24.9919 198.678 li
38.6719 198.678 li
38.6719 200.298 li
37.1959 200.298 li
37.7899 200.64 38.2219 201.072 38.4919 201.594 cv
38.7619 202.116 38.9059 202.728 38.9059 203.448 cv
38.9059 204.636 38.4379 205.608 37.5019 206.364 cv
36.5659 207.12 35.3059 207.48 33.7579 207.48 cv
32.2099 207.48 30.9679 207.12 30.0139 206.364 cv
29.0779 205.608 28.5919 204.636 28.5919 203.448 cv
28.5919 202.728 28.7359 202.116 29.0239 201.594 cv
29.3119 201.072 29.7439 200.64 30.3199 200.298 cv
33.7579 205.806 mo
34.9459 205.806 35.8819 205.572 36.5659 205.086 cv
37.2499 204.6 37.5739 203.916 37.5739 203.052 cv
37.5739 202.206 37.2499 201.54 36.5659 201.036 cv
35.8819 200.55 34.9459 200.298 33.7579 200.298 cv
32.5699 200.298 31.6519 200.55 30.9679 201.036 cv
30.2839 201.54 29.9419 202.206 29.9419 203.052 cv
29.9419 203.916 30.2839 204.6 30.9679 205.086 cv
31.6519 205.572 32.5699 205.806 33.7579 205.806 cv
f
33.3439 186.928 mo
34.1359 186.928 li
34.1359 194.362 li
35.2519 194.29 36.1159 193.966 36.6919 193.354 cv
37.2679 192.76 37.5559 191.932 37.5559 190.852 cv
37.5559 190.24 37.4839 189.628 37.3399 189.052 cv
37.1959 188.476 36.9619 187.882 36.6379 187.306 cv
38.1679 187.306 li
38.4199 187.882 38.6179 188.476 38.7259 189.088 cv
38.8339 189.7 38.9059 190.33 38.9059 190.942 cv
38.9059 192.526 38.4559 193.768 37.5559 194.686 cv
36.6559 195.604 35.4139 196.054 33.8479 196.054 cv
32.2459 196.054 30.9679 195.622 30.0139 194.758 cv
29.0779 193.894 28.5919 192.706 28.5919 191.23 cv
28.5919 189.898 29.0239 188.854 29.8699 188.08 cv
30.7339 187.324 31.8859 186.928 33.3439 186.928 cv
32.8759 188.548 mo
31.9939 188.566 31.2919 188.818 30.7519 189.286 cv
30.2299 189.772 29.9599 190.42 29.9599 191.212 cv
29.9599 192.112 30.2299 192.832 30.7339 193.372 cv
31.2379 193.912 31.9579 194.236 32.8759 194.308 cv
32.8759 188.548 li
f
33.6319 177.798 mo
32.4799 177.798 31.5619 178.05 30.9139 178.518 cv
30.2659 179.004 29.9419 179.688 29.9419 180.552 cv
29.9419 181.416 30.2659 182.1 30.9139 182.586 cv
31.5619 183.072 32.4799 183.306 33.6319 183.306 cv
34.8019 183.306 35.7019 183.072 36.3499 182.586 cv
36.9979 182.1 37.3219 181.416 37.3219 180.552 cv
37.3219 179.688 36.9979 179.004 36.3499 178.518 cv
35.7019 178.05 34.8019 177.798 33.6319 177.798 cv
37.4479 176.178 mo
39.1039 176.178 40.3459 176.556 41.1739 177.294 cv
41.9839 178.05 42.3979 179.184 42.3979 180.714 cv
42.3979 181.29 42.3439 181.812 42.2719 182.316 cv
42.1819 182.82 42.0559 183.324 41.8759 183.792 cv
40.3099 183.792 li
40.5619 183.324 40.7419 182.856 40.8679 182.388 cv
40.9939 181.92 41.0659 181.452 41.0659 180.966 cv
41.0659 179.922 40.7779 179.13 40.2379 178.59 cv
39.6799 178.068 38.8519 177.798 37.7359 177.798 cv
36.9439 177.798 li
37.5199 178.14 37.9519 178.572 38.2399 179.094 cv
38.5279 179.616 38.6719 180.228 38.6719 180.948 cv
38.6719 182.172 38.2219 183.144 37.3039 183.882 cv
36.3859 184.62 35.1619 184.98 33.6319 184.98 cv
32.1199 184.98 30.8959 184.62 29.9779 183.882 cv
29.0599 183.144 28.5919 182.172 28.5919 180.948 cv
28.5919 180.228 28.7359 179.616 29.0239 179.094 cv
29.3119 178.572 29.7439 178.14 30.3199 177.798 cv
28.8259 177.798 li
28.8259 176.178 li
37.4479 176.178 li
f
25.0099 173.104 mo
25.0099 171.7 li
26.3959 170.836 27.7459 170.17 29.0779 169.738 cv
30.4099 169.306 31.7239 169.072 33.0199 169.072 cv
34.3339 169.072 35.6479 169.306 36.9799 169.738 cv
38.3119 170.17 39.6439 170.836 41.0299 171.7 cv
41.0299 173.104 li
39.6799 172.33 38.3659 171.754 37.0339 171.358 cv
35.7199 170.98 34.3879 170.782 33.0199 170.782 cv
31.6699 170.782 30.3379 170.98 29.0239 171.358 cv
27.7099 171.754 26.3779 172.33 25.0099 173.104 cv
f
24.9919 235.892 mo
28.6279 236.594 li
28.6279 235.442 29.0779 234.542 29.9779 233.93 cv
30.8959 233.318 32.1559 233.174 33.7579 233.462 cv
35.3779 233.786 36.6379 234.434 37.5379 235.406 cv
38.4379 236.36 38.8699 237.422 38.8699 238.592 cv
42.3979 239.276 li
42.3979 240.896 li
38.8699 240.194 li
38.8699 241.382 38.4379 242.264 37.5379 242.858 cv
36.6379 243.488 35.3779 243.65 33.7579 243.326 cv
32.1559 243.02 30.8959 242.372 29.9779 241.382 cv
29.0779 240.446 28.6279 239.384 28.6279 238.214 cv
24.9919 237.494 li
24.9919 235.892 li
37.4479 238.304 mo
37.4479 237.656 37.1599 237.044 36.5479 236.468 cv
35.8819 235.856 34.9459 235.424 33.7579 235.172 cv
32.5879 234.956 31.6519 235.028 30.9679 235.388 cv
30.3739 235.73 30.0679 236.234 30.0679 236.882 cv
37.4479 238.304 li
37.4479 239.924 mo
30.0679 238.484 li
30.0679 239.15 30.3739 239.762 30.9679 240.32 cv
31.6519 240.968 32.5879 241.4 33.7579 241.616 cv
34.9459 241.85 35.8819 241.778 36.5479 241.4 cv
37.1599 241.076 37.4479 240.59 37.4479 239.924 cv
f
gsave
90 362.693 mo
648 362.693 li
648 48.9023 li
90 48.9023 li
90 362.693 li
clp
90.9673 52.7494 mo
91.6303 52.7494 92.2662 52.486 92.735 52.0172 cv
93.2038 51.5484 93.4673 50.9124 93.4673 50.2494 cv
93.4673 49.5864 93.2038 48.9505 92.735 48.4817 cv
92.2662 48.0128 91.6303 47.7494 90.9673 47.7494 cv
90.3043 47.7494 89.6683 48.0128 89.1995 48.4817 cv
88.7307 48.9505 88.4673 49.5864 88.4673 50.2494 cv
88.4673 50.9124 88.7307 51.5484 89.1995 52.0172 cv
89.6683 52.486 90.3043 52.7494 90.9673 52.7494 cv
cp
f
1 lw
90.9673 52.7494 mo
91.6303 52.7494 92.2662 52.486 92.735 52.0172 cv
93.2038 51.5484 93.4673 50.9124 93.4673 50.2494 cv
93.4673 49.5864 93.2038 48.9505 92.735 48.4817 cv
92.2662 48.0128 91.6303 47.7494 90.9673 47.7494 cv
90.3043 47.7494 89.6683 48.0128 89.1995 48.4817 cv
88.7307 48.9505 88.4673 49.5864 88.4673 50.2494 cv
88.4673 50.9124 88.7307 51.5484 89.1995 52.0172 cv
89.6683 52.486 90.3043 52.7494 90.9673 52.7494 cv
cp
@
grestore
gsave
90 362.693 mo
648 362.693 li
648 48.9023 li
90 48.9023 li
90 362.693 li
clp
91.5225 52.8042 mo
92.1855 52.8042 92.8215 52.5408 93.2903 52.072 cv
93.7591 51.6031 94.0225 50.9672 94.0225 50.3042 cv
94.0225 49.6412 93.7591 49.0052 93.2903 48.5364 cv
92.8215 48.0676 92.1855 47.8042 91.5225 47.8042 cv
90.8595 47.8042 90.2236 48.0676 89.7548 48.5364 cv
89.2859 49.0052 89.0225 49.6412 89.0225 50.3042 cv
89.0225 50.9672 89.2859 51.6031 89.7548 52.072 cv
90.2236 52.5408 90.8595 52.8042 91.5225 52.8042 cv
cp
f
1 lw
91.5225 52.8042 mo
92.1855 52.8042 92.8215 52.5408 93.2903 52.072 cv
93.7591 51.6031 94.0225 50.9672 94.0225 50.3042 cv
94.0225 49.6412 93.7591 49.0052 93.2903 48.5364 cv
92.8215 48.0676 92.1855 47.8042 91.5225 47.8042 cv
90.8595 47.8042 90.2236 48.0676 89.7548 48.5364 cv
89.2859 49.0052 89.0225 49.6412 89.0225 50.3042 cv
89.0225 50.9672 89.2859 51.6031 89.7548 52.072 cv
90.2236 52.5408 90.8595 52.8042 91.5225 52.8042 cv
cp
@
grestore
gsave
90 362.693 mo
648 362.693 li
648 48.9023 li
90 48.9023 li
90 362.693 li
clp
92.0778 52.859 mo
92.7408 52.859 93.3768 52.5956 93.8456 52.1268 cv
94.3144 51.658 94.5778 51.022 94.5778 50.359 cv
94.5778 49.696 94.3144 49.0601 93.8456 48.5912 cv
93.3768 48.1224 92.7408 47.859 92.0778 47.859 cv
91.4148 47.859 90.7789 48.1224 90.31 48.5912 cv
89.8412 49.0601 89.5778 49.696 89.5778 50.359 cv
89.5778 51.022 89.8412 51.658 90.31 52.1268 cv
90.7789 52.5956 91.4148 52.859 92.0778 52.859 cv
cp
f
1 lw
92.0778 52.859 mo
92.7408 52.859 93.3768 52.5956 93.8456 52.1268 cv
94.3144 51.658 94.5778 51.022 94.5778 50.359 cv
94.5778 49.696 94.3144 49.0601 93.8456 48.5912 cv
93.3768 48.1224 92.7408 47.859 92.0778 47.859 cv
91.4148 47.859 90.7789 48.1224 90.31 48.5912 cv
89.8412 49.0601 89.5778 49.696 89.5778 50.359 cv
89.5778 51.022 89.8412 51.658 90.31 52.1268 cv
90.7789 52.5956 91.4148 52.859 92.0778 52.859 cv
cp
@
grestore
gsave
90 362.693 mo
648 362.693 li
648 48.9023 li
90 48.9023 li
90 362.693 li
clp
92.9107 52.9412 mo
93.5737 52.9412 94.2097 52.6778 94.6785 52.209 cv
95.1473 51.7402 95.4107 51.1042 95.4107 50.4412 cv
95.4107 49.7782 95.1473 49.1423 94.6785 48.6735 cv
94.2097 48.2047 93.5737 47.9412 92.9107 47.9412 cv
92.2477 47.9412 91.6118 48.2047 91.143 48.6735 cv
90.6741 49.1423 90.4107 49.7782 90.4107 50.4412 cv
90.4107 51.1042 90.6741 51.7402 91.143 52.209 cv
91.6118 52.6778 92.2477 52.9412 92.9107 52.9412 cv
cp
f
1 lw
92.9107 52.9412 mo
93.5737 52.9412 94.2097 52.6778 94.6785 52.209 cv
95.1473 51.7402 95.4107 51.1042 95.4107 50.4412 cv
95.4107 49.7782 95.1473 49.1423 94.6785 48.6735 cv
94.2097 48.2047 93.5737 47.9412 92.9107 47.9412 cv
92.2477 47.9412 91.6118 48.2047 91.143 48.6735 cv
90.6741 49.1423 90.4107 49.7782 90.4107 50.4412 cv
90.4107 51.1042 90.6741 51.7402 91.143 52.209 cv
91.6118 52.6778 92.2477 52.9412 92.9107 52.9412 cv
cp
@
grestore
gsave
90 362.693 mo
648 362.693 li
648 48.9023 li
90 48.9023 li
90 362.693 li
clp
94.1601 53.0646 mo
94.8231 53.0646 95.4591 52.8012 95.9279 52.3324 cv
96.3967 51.8636 96.6601 51.2276 96.6601 50.5646 cv
96.6601 49.9016 96.3967 49.2657 95.9279 48.7968 cv
95.4591 48.328 94.8231 48.0646 94.1601 48.0646 cv
93.4971 48.0646 92.8612 48.328 92.3923 48.7968 cv
91.9235 49.2657 91.6601 49.9016 91.6601 50.5646 cv
91.6601 51.2276 91.9235 51.8636 92.3923 52.3324 cv
92.8612 52.8012 93.4971 53.0646 94.1601 53.0646 cv
cp
f
1 lw
94.1601 53.0646 mo
94.8231 53.0646 95.4591 52.8012 95.9279 52.3324 cv
96.3967 51.8636 96.6601 51.2276 96.6601 50.5646 cv
96.6601 49.9016 96.3967 49.2657 95.9279 48.7968 cv
95.4591 48.328 94.8231 48.0646 94.1601 48.0646 cv
93.4971 48.0646 92.8612 48.328 92.3923 48.7968 cv
91.9235 49.2657 91.6601 49.9016 91.6601 50.5646 cv
91.6601 51.2276 91.9235 51.8636 92.3923 52.3324 cv
92.8612 52.8012 93.4971 53.0646 94.1601 53.0646 cv
cp
@
grestore
gsave
90 362.693 mo
648 362.693 li
648 48.9023 li
90 48.9023 li
90 362.693 li
clp
96.0342 53.2497 mo
96.6972 53.2497 97.3331 52.9863 97.8019 52.5175 cv
98.2707 52.0486 98.5342 51.4127 98.5342 50.7497 cv
98.5342 50.0867 98.2707 49.4507 97.8019 48.9819 cv
97.3331 48.5131 96.6972 48.2497 96.0342 48.2497 cv
95.3712 48.2497 94.7352 48.5131 94.2664 48.9819 cv
93.7976 49.4507 93.5342 50.0867 93.5342 50.7497 cv
93.5342 51.4127 93.7976 52.0486 94.2664 52.5175 cv
94.7352 52.9863 95.3712 53.2497 96.0342 53.2497 cv
cp
f
1 lw
96.0342 53.2497 mo
96.6972 53.2497 97.3331 52.9863 97.8019 52.5175 cv
98.2707 52.0486 98.5342 51.4127 98.5342 50.7497 cv
98.5342 50.0867 98.2707 49.4507 97.8019 48.9819 cv
97.3331 48.5131 96.6972 48.2497 96.0342 48.2497 cv
95.3712 48.2497 94.7352 48.5131 94.2664 48.9819 cv
93.7976 49.4507 93.5342 50.0867 93.5342 50.7497 cv
93.5342 51.4127 93.7976 52.0486 94.2664 52.5175 cv
94.7352 52.9863 95.3712 53.2497 96.0342 53.2497 cv
cp
@
grestore
gsave
90 362.693 mo
648 362.693 li
648 48.9023 li
90 48.9023 li
90 362.693 li
clp
98.8453 53.5274 mo
99.5083 53.5274 100.144 53.264 100.613 52.7952 cv
101.082 52.3264 101.345 51.6904 101.345 51.0274 cv
101.345 50.3644 101.082 49.7285 100.613 49.2596 cv
100.144 48.7908 99.5083 48.5274 98.8453 48.5274 cv
98.1822 48.5274 97.5463 48.7908 97.0775 49.2596 cv
96.6087 49.7285 96.3453 50.3644 96.3453 51.0274 cv
96.3453 51.6904 96.6087 52.3264 97.0775 52.7952 cv
97.5463 53.264 98.1822 53.5274 98.8453 53.5274 cv
cp
f
1 lw
98.8453 53.5274 mo
99.5083 53.5274 100.144 53.264 100.613 52.7952 cv
101.082 52.3264 101.345 51.6904 101.345 51.0274 cv
101.345 50.3644 101.082 49.7285 100.613 49.2596 cv
100.144 48.7908 99.5083 48.5274 98.8453 48.5274 cv
98.1822 48.5274 97.5463 48.7908 97.0775 49.2596 cv
96.6087 49.7285 96.3453 50.3644 96.3453 51.0274 cv
96.3453 51.6904 96.6087 52.3264 97.0775 52.7952 cv
97.5463 53.264 98.1822 53.5274 98.8453 53.5274 cv
cp
@
grestore
gsave
90 362.693 mo
648 362.693 li
648 48.9023 li
90 48.9023 li
90 362.693 li
clp
103.062 53.9443 mo
103.725 53.9443 104.361 53.6809 104.83 53.2121 cv
105.298 52.7433 105.562 52.1073 105.562 51.4443 cv
105.562 50.7813 105.298 50.1454 104.83 49.6765 cv
104.361 49.2077 103.725 48.9443 103.062 48.9443 cv
102.399 48.9443 101.763 49.2077 101.294 49.6765 cv
100.825 50.1454 100.562 50.7813 100.562 51.4443 cv
100.562 52.1073 100.825 52.7433 101.294 53.2121 cv
101.763 53.6809 102.399 53.9443 103.062 53.9443 cv
cp
f
1 lw
103.062 53.9443 mo
103.725 53.9443 104.361 53.6809 104.83 53.2121 cv
105.298 52.7433 105.562 52.1073 105.562 51.4443 cv
105.562 50.7813 105.298 50.1454 104.83 49.6765 cv
104.361 49.2077 103.725 48.9443 103.062 48.9443 cv
102.399 48.9443 101.763 49.2077 101.294 49.6765 cv
100.825 50.1454 100.562 50.7813 100.562 51.4443 cv
100.562 52.1073 100.825 52.7433 101.294 53.2121 cv
101.763 53.6809 102.399 53.9443 103.062 53.9443 cv
cp
@
grestore
gsave
90 362.693 mo
648 362.693 li
648 48.9023 li
90 48.9023 li
90 362.693 li
clp
109.387 54.5705 mo
110.05 54.5705 110.686 54.3071 111.155 53.8382 cv
111.623 53.3694 111.887 52.7335 111.887 52.0705 cv
111.887 51.4075 111.623 50.7715 111.155 50.3027 cv
110.686 49.8339 110.05 49.5705 109.387 49.5705 cv
108.724 49.5705 108.088 49.8339 107.619 50.3027 cv
107.15 50.7715 106.887 51.4075 106.887 52.0705 cv
106.887 52.7335 107.15 53.3694 107.619 53.8382 cv
108.088 54.3071 108.724 54.5705 109.387 54.5705 cv
cp
f
1 lw
109.387 54.5705 mo
110.05 54.5705 110.686 54.3071 111.155 53.8382 cv
111.623 53.3694 111.887 52.7335 111.887 52.0705 cv
111.887 51.4075 111.623 50.7715 111.155 50.3027 cv
110.686 49.8339 110.05 49.5705 109.387 49.5705 cv
108.724 49.5705 108.088 49.8339 107.619 50.3027 cv
107.15 50.7715 106.887 51.4075 106.887 52.0705 cv
106.887 52.7335 107.15 53.3694 107.619 53.8382 cv
108.088 54.3071 108.724 54.5705 109.387 54.5705 cv
cp
@
grestore
118.874 55.5122 mo
119.537 55.5122 120.173 55.2488 120.642 54.78 cv
121.111 54.3112 121.374 53.6752 121.374 53.0122 cv
121.374 52.3492 121.111 51.7133 120.642 51.2444 cv
120.173 50.7756 119.537 50.5122 118.874 50.5122 cv
118.211 50.5122 117.575 50.7756 117.107 51.2444 cv
116.638 51.7133 116.374 52.3492 116.374 53.0122 cv
116.374 53.6752 116.638 54.3112 117.107 54.78 cv
117.575 55.2488 118.211 55.5122 118.874 55.5122 cv
cp
f
1 lw
118.874 55.5122 mo
119.537 55.5122 120.173 55.2488 120.642 54.78 cv
121.111 54.3112 121.374 53.6752 121.374 53.0122 cv
121.374 52.3492 121.111 51.7133 120.642 51.2444 cv
120.173 50.7756 119.537 50.5122 118.874 50.5122 cv
118.211 50.5122 117.575 50.7756 117.107 51.2444 cv
116.638 51.7133 116.374 52.3492 116.374 53.0122 cv
116.374 53.6752 116.638 54.3112 117.107 54.78 cv
117.575 55.2488 118.211 55.5122 118.874 55.5122 cv
cp
@
133.105 56.9334 mo
133.768 56.9334 134.404 56.67 134.873 56.2011 cv
135.342 55.7323 135.605 55.0964 135.605 54.4334 cv
135.605 53.7704 135.342 53.1344 134.873 52.6656 cv
134.404 52.1968 133.768 51.9334 133.105 51.9334 cv
132.442 51.9334 131.806 52.1968 131.338 52.6656 cv
130.869 53.1344 130.605 53.7704 130.605 54.4334 cv
130.605 55.0964 130.869 55.7323 131.338 56.2011 cv
131.806 56.67 132.442 56.9334 133.105 56.9334 cv
cp
f
133.105 56.9334 mo
133.768 56.9334 134.404 56.67 134.873 56.2011 cv
135.342 55.7323 135.605 55.0964 135.605 54.4334 cv
135.605 53.7704 135.342 53.1344 134.873 52.6656 cv
134.404 52.1968 133.768 51.9334 133.105 51.9334 cv
132.442 51.9334 131.806 52.1968 131.338 52.6656 cv
130.869 53.1344 130.605 53.7704 130.605 54.4334 cv
130.605 55.0964 130.869 55.7323 131.338 56.2011 cv
131.806 56.67 132.442 56.9334 133.105 56.9334 cv
cp
@
138.442 57.4709 mo
139.105 57.4709 139.741 57.2075 140.21 56.7386 cv
140.679 56.2698 140.942 55.6339 140.942 54.9709 cv
140.942 54.3079 140.679 53.6719 140.21 53.2031 cv
139.741 52.7343 139.105 52.4709 138.442 52.4709 cv
137.779 52.4709 137.143 52.7343 136.674 53.2031 cv
136.206 53.6719 135.942 54.3079 135.942 54.9709 cv
135.942 55.6339 136.206 56.2698 136.674 56.7386 cv
137.143 57.2075 137.779 57.4709 138.442 57.4709 cv
cp
f
138.442 57.4709 mo
139.105 57.4709 139.741 57.2075 140.21 56.7386 cv
140.679 56.2698 140.942 55.6339 140.942 54.9709 cv
140.942 54.3079 140.679 53.6719 140.21 53.2031 cv
139.741 52.7343 139.105 52.4709 138.442 52.4709 cv
137.779 52.4709 137.143 52.7343 136.674 53.2031 cv
136.206 53.6719 135.942 54.3079 135.942 54.9709 cv
135.942 55.6339 136.206 56.2698 136.674 56.7386 cv
137.143 57.2075 137.779 57.4709 138.442 57.4709 cv
cp
@
146.447 58.2888 mo
147.11 58.2888 147.746 58.0254 148.215 57.5565 cv
148.684 57.0877 148.947 56.4518 148.947 55.7888 cv
148.947 55.1258 148.684 54.4898 148.215 54.021 cv
147.746 53.5522 147.11 53.2888 146.447 53.2888 cv
145.784 53.2888 145.148 53.5522 144.679 54.021 cv
144.211 54.4898 143.947 55.1258 143.947 55.7888 cv
143.947 56.4518 144.211 57.0877 144.679 57.5565 cv
145.148 58.0254 145.784 58.2888 146.447 58.2888 cv
cp
f
146.447 58.2888 mo
147.11 58.2888 147.746 58.0254 148.215 57.5565 cv
148.684 57.0877 148.947 56.4518 148.947 55.7888 cv
148.947 55.1258 148.684 54.4898 148.215 54.021 cv
147.746 53.5522 147.11 53.2888 146.447 53.2888 cv
145.784 53.2888 145.148 53.5522 144.679 54.021 cv
144.211 54.4898 143.947 55.1258 143.947 55.7888 cv
143.947 56.4518 144.211 57.0877 144.679 57.5565 cv
145.148 58.0254 145.784 58.2888 146.447 58.2888 cv
cp
@
147.948 58.4546 mo
148.611 58.4546 149.247 58.1912 149.716 57.7224 cv
150.185 57.2535 150.448 56.6176 150.448 55.9546 cv
150.448 55.2916 150.185 54.6556 149.716 54.1868 cv
149.247 53.718 148.611 53.4546 147.948 53.4546 cv
147.285 53.4546 146.649 53.718 146.18 54.1868 cv
145.712 54.6556 145.448 55.2916 145.448 55.9546 cv
145.448 56.6176 145.712 57.2535 146.18 57.7224 cv
146.649 58.1912 147.285 58.4546 147.948 58.4546 cv
cp
f
147.948 58.4546 mo
148.611 58.4546 149.247 58.1912 149.716 57.7224 cv
150.185 57.2535 150.448 56.6176 150.448 55.9546 cv
150.448 55.2916 150.185 54.6556 149.716 54.1868 cv
149.247 53.718 148.611 53.4546 147.948 53.4546 cv
147.285 53.4546 146.649 53.718 146.18 54.1868 cv
145.712 54.6556 145.448 55.2916 145.448 55.9546 cv
145.448 56.6176 145.712 57.2535 146.18 57.7224 cv
146.649 58.1912 147.285 58.4546 147.948 58.4546 cv
cp
@
149.449 58.6235 mo
150.112 58.6235 150.748 58.36 151.217 57.8912 cv
151.686 57.4224 151.949 56.7865 151.949 56.1235 cv
151.949 55.4604 151.686 54.8245 151.217 54.3557 cv
150.748 53.8869 150.112 53.6235 149.449 53.6235 cv
148.786 53.6235 148.15 53.8869 147.681 54.3557 cv
147.212 54.8245 146.949 55.4604 146.949 56.1235 cv
146.949 56.7865 147.212 57.4224 147.681 57.8912 cv
148.15 58.36 148.786 58.6235 149.449 58.6235 cv
cp
f
149.449 58.6235 mo
150.112 58.6235 150.748 58.36 151.217 57.8912 cv
151.686 57.4224 151.949 56.7865 151.949 56.1235 cv
151.949 55.4604 151.686 54.8245 151.217 54.3557 cv
150.748 53.8869 150.112 53.6235 149.449 53.6235 cv
148.786 53.6235 148.15 53.8869 147.681 54.3557 cv
147.212 54.8245 146.949 55.4604 146.949 56.1235 cv
146.949 56.7865 147.212 57.4224 147.681 57.8912 cv
148.15 58.36 148.786 58.6235 149.449 58.6235 cv
cp
@
151.7 58.8866 mo
152.363 58.8866 152.999 58.6232 153.468 58.1544 cv
153.937 57.6855 154.2 57.0496 154.2 56.3866 cv
154.2 55.7236 153.937 55.0876 153.468 54.6188 cv
152.999 54.15 152.363 53.8866 151.7 53.8866 cv
151.037 53.8866 150.401 54.15 149.933 54.6188 cv
149.464 55.0876 149.2 55.7236 149.2 56.3866 cv
149.2 57.0496 149.464 57.6855 149.933 58.1544 cv
150.401 58.6232 151.037 58.8866 151.7 58.8866 cv
cp
f
151.7 58.8866 mo
152.363 58.8866 152.999 58.6232 153.468 58.1544 cv
153.937 57.6855 154.2 57.0496 154.2 56.3866 cv
154.2 55.7236 153.937 55.0876 153.468 54.6188 cv
152.999 54.15 152.363 53.8866 151.7 53.8866 cv
151.037 53.8866 150.401 54.15 149.933 54.6188 cv
149.464 55.0876 149.2 55.7236 149.2 56.3866 cv
149.2 57.0496 149.464 57.6855 149.933 58.1544 cv
150.401 58.6232 151.037 58.8866 151.7 58.8866 cv
cp
@
153.952 59.1588 mo
154.615 59.1588 155.251 58.8953 155.72 58.4265 cv
156.188 57.9577 156.452 57.3217 156.452 56.6588 cv
156.452 55.9957 156.188 55.3598 155.72 54.891 cv
155.251 54.4222 154.615 54.1588 153.952 54.1588 cv
153.289 54.1588 152.653 54.4222 152.184 54.891 cv
151.715 55.3598 151.452 55.9957 151.452 56.6588 cv
151.452 57.3217 151.715 57.9577 152.184 58.4265 cv
152.653 58.8953 153.289 59.1588 153.952 59.1588 cv
cp
f
153.952 59.1588 mo
154.615 59.1588 155.251 58.8953 155.72 58.4265 cv
156.188 57.9577 156.452 57.3217 156.452 56.6588 cv
156.452 55.9957 156.188 55.3598 155.72 54.891 cv
155.251 54.4222 154.615 54.1588 153.952 54.1588 cv
153.289 54.1588 152.653 54.4222 152.184 54.891 cv
151.715 55.3598 151.452 55.9957 151.452 56.6588 cv
151.452 57.3217 151.715 57.9577 152.184 58.4265 cv
152.653 58.8953 153.289 59.1588 153.952 59.1588 cv
cp
@
156.203 59.433 mo
156.866 59.433 157.502 59.1696 157.971 58.7007 cv
158.44 58.2319 158.703 57.596 158.703 56.933 cv
158.703 56.27 158.44 55.634 157.971 55.1652 cv
157.502 54.6964 156.866 54.433 156.203 54.433 cv
155.54 54.433 154.904 54.6964 154.436 55.1652 cv
153.967 55.634 153.703 56.27 153.703 56.933 cv
153.703 57.596 153.967 58.2319 154.436 58.7007 cv
154.904 59.1696 155.54 59.433 156.203 59.433 cv
cp
f
156.203 59.433 mo
156.866 59.433 157.502 59.1696 157.971 58.7007 cv
158.44 58.2319 158.703 57.596 158.703 56.933 cv
158.703 56.27 158.44 55.634 157.971 55.1652 cv
157.502 54.6964 156.866 54.433 156.203 54.433 cv
155.54 54.433 154.904 54.6964 154.436 55.1652 cv
153.967 55.634 153.703 56.27 153.703 56.933 cv
153.703 57.596 153.967 58.2319 154.436 58.7007 cv
154.904 59.1696 155.54 59.433 156.203 59.433 cv
cp
@
159.58 59.8449 mo
160.243 59.8449 160.879 59.5815 161.348 59.1127 cv
161.817 58.6439 162.08 58.0079 162.08 57.3449 cv
162.08 56.6819 161.817 56.046 161.348 55.5772 cv
160.879 55.1084 160.243 54.8449 159.58 54.8449 cv
158.917 54.8449 158.281 55.1084 157.813 55.5772 cv
157.344 56.046 157.08 56.6819 157.08 57.3449 cv
157.08 58.0079 157.344 58.6439 157.813 59.1127 cv
158.281 59.5815 158.917 59.8449 159.58 59.8449 cv
cp
f
159.58 59.8449 mo
160.243 59.8449 160.879 59.5815 161.348 59.1127 cv
161.817 58.6439 162.08 58.0079 162.08 57.3449 cv
162.08 56.6819 161.817 56.046 161.348 55.5772 cv
160.879 55.1084 160.243 54.8449 159.58 54.8449 cv
158.917 54.8449 158.281 55.1084 157.813 55.5772 cv
157.344 56.046 157.08 56.6819 157.08 57.3449 cv
157.08 58.0079 157.344 58.6439 157.813 59.1127 cv
158.281 59.5815 158.917 59.8449 159.58 59.8449 cv
cp
@
164.646 60.4672 mo
165.309 60.4672 165.945 60.2038 166.414 59.735 cv
166.883 59.2662 167.146 58.6302 167.146 57.9672 cv
167.146 57.3042 166.883 56.6683 166.414 56.1994 cv
165.945 55.7306 165.309 55.4672 164.646 55.4672 cv
163.983 55.4672 163.347 55.7306 162.878 56.1994 cv
162.409 56.6683 162.146 57.3042 162.146 57.9672 cv
162.146 58.6302 162.409 59.2662 162.878 59.735 cv
163.347 60.2038 163.983 60.4672 164.646 60.4672 cv
cp
f
164.646 60.4672 mo
165.309 60.4672 165.945 60.2038 166.414 59.735 cv
166.883 59.2662 167.146 58.6302 167.146 57.9672 cv
167.146 57.3042 166.883 56.6683 166.414 56.1994 cv
165.945 55.7306 165.309 55.4672 164.646 55.4672 cv
163.983 55.4672 163.347 55.7306 162.878 56.1994 cv
162.409 56.6683 162.146 57.3042 162.146 57.9672 cv
162.146 58.6302 162.409 59.2662 162.878 59.735 cv
163.347 60.2038 163.983 60.4672 164.646 60.4672 cv
cp
@
172.245 61.4102 mo
172.908 61.4102 173.544 61.1468 174.012 60.678 cv
174.481 60.2092 174.745 59.5732 174.745 58.9102 cv
174.745 58.2472 174.481 57.6113 174.012 57.1425 cv
173.544 56.6736 172.908 56.4102 172.245 56.4102 cv
171.582 56.4102 170.946 56.6736 170.477 57.1425 cv
170.008 57.6113 169.745 58.2472 169.745 58.9102 cv
169.745 59.5732 170.008 60.2092 170.477 60.678 cv
170.946 61.1468 171.582 61.4102 172.245 61.4102 cv
cp
f
172.245 61.4102 mo
172.908 61.4102 173.544 61.1468 174.012 60.678 cv
174.481 60.2092 174.745 59.5732 174.745 58.9102 cv
174.745 58.2472 174.481 57.6113 174.012 57.1425 cv
173.544 56.6736 172.908 56.4102 172.245 56.4102 cv
171.582 56.4102 170.946 56.6736 170.477 57.1425 cv
170.008 57.6113 169.745 58.2472 169.745 58.9102 cv
169.745 59.5732 170.008 60.2092 170.477 60.678 cv
170.946 61.1468 171.582 61.4102 172.245 61.4102 cv
cp
@
183.642 62.845 mo
184.305 62.845 184.941 62.5816 185.41 62.1128 cv
185.879 61.644 186.142 61.0081 186.142 60.345 cv
186.142 59.682 185.879 59.0461 185.41 58.5773 cv
184.941 58.1085 184.305 57.845 183.642 57.845 cv
182.979 57.845 182.343 58.1085 181.875 58.5773 cv
181.406 59.0461 181.142 59.682 181.142 60.345 cv
181.142 61.0081 181.406 61.644 181.875 62.1128 cv
182.343 62.5816 182.979 62.845 183.642 62.845 cv
cp
f
183.642 62.845 mo
184.305 62.845 184.941 62.5816 185.41 62.1128 cv
185.879 61.644 186.142 61.0081 186.142 60.345 cv
186.142 59.682 185.879 59.0461 185.41 58.5773 cv
184.941 58.1085 184.305 57.845 183.642 57.845 cv
182.979 57.845 182.343 58.1085 181.875 58.5773 cv
181.406 59.0461 181.142 59.682 181.142 60.345 cv
181.142 61.0081 181.406 61.644 181.875 62.1128 cv
182.343 62.5816 182.979 62.845 183.642 62.845 cv
cp
@
186.492 63.2086 mo
187.155 63.2086 187.791 62.9452 188.26 62.4763 cv
188.728 62.0075 188.992 61.3716 188.992 60.7086 cv
188.992 60.0456 188.728 59.4096 188.26 58.9408 cv
187.791 58.472 187.155 58.2086 186.492 58.2086 cv
185.829 58.2086 185.193 58.472 184.724 58.9408 cv
184.255 59.4096 183.992 60.0456 183.992 60.7086 cv
183.992 61.3716 184.255 62.0075 184.724 62.4763 cv
185.193 62.9452 185.829 63.2086 186.492 63.2086 cv
cp
f
186.492 63.2086 mo
187.155 63.2086 187.791 62.9452 188.26 62.4763 cv
188.728 62.0075 188.992 61.3716 188.992 60.7086 cv
188.992 60.0456 188.728 59.4096 188.26 58.9408 cv
187.791 58.472 187.155 58.2086 186.492 58.2086 cv
185.829 58.2086 185.193 58.472 184.724 58.9408 cv
184.255 59.4096 183.992 60.0456 183.992 60.7086 cv
183.992 61.3716 184.255 62.0075 184.724 62.4763 cv
185.193 62.9452 185.829 63.2086 186.492 63.2086 cv
cp
@
189.341 63.5735 mo
190.004 63.5735 190.64 63.3101 191.109 62.8413 cv
191.578 62.3725 191.841 61.7365 191.841 61.0735 cv
191.841 60.4105 191.578 59.7746 191.109 59.3057 cv
190.64 58.8369 190.004 58.5735 189.341 58.5735 cv
188.678 58.5735 188.042 58.8369 187.573 59.3057 cv
187.105 59.7746 186.841 60.4105 186.841 61.0735 cv
186.841 61.7365 187.105 62.3725 187.573 62.8413 cv
188.042 63.3101 188.678 63.5735 189.341 63.5735 cv
cp
f
189.341 63.5735 mo
190.004 63.5735 190.64 63.3101 191.109 62.8413 cv
191.578 62.3725 191.841 61.7365 191.841 61.0735 cv
191.841 60.4105 191.578 59.7746 191.109 59.3057 cv
190.64 58.8369 190.004 58.5735 189.341 58.5735 cv
188.678 58.5735 188.042 58.8369 187.573 59.3057 cv
187.105 59.7746 186.841 60.4105 186.841 61.0735 cv
186.841 61.7365 187.105 62.3725 187.573 62.8413 cv
188.042 63.3101 188.678 63.5735 189.341 63.5735 cv
cp
@
193.615 64.1219 mo
194.278 64.1219 194.914 63.8586 195.383 63.3897 cv
195.852 62.9209 196.115 62.285 196.115 61.6219 cv
196.115 60.959 195.852 60.323 195.383 59.8542 cv
194.914 59.3854 194.278 59.1219 193.615 59.1219 cv
192.952 59.1219 192.316 59.3854 191.848 59.8542 cv
191.379 60.323 191.115 60.959 191.115 61.6219 cv
191.115 62.285 191.379 62.9209 191.848 63.3897 cv
192.316 63.8586 192.952 64.1219 193.615 64.1219 cv
cp
f
193.615 64.1219 mo
194.278 64.1219 194.914 63.8586 195.383 63.3897 cv
195.852 62.9209 196.115 62.285 196.115 61.6219 cv
196.115 60.959 195.852 60.323 195.383 59.8542 cv
194.914 59.3854 194.278 59.1219 193.615 59.1219 cv
192.952 59.1219 192.316 59.3854 191.848 59.8542 cv
191.379 60.323 191.115 60.959 191.115 61.6219 cv
191.115 62.285 191.379 62.9209 191.848 63.3897 cv
192.316 63.8586 192.952 64.1219 193.615 64.1219 cv
cp
@
200.027 64.944 mo
200.69 64.944 201.326 64.6806 201.794 64.2118 cv
202.263 63.743 202.527 63.1071 202.527 62.444 cv
202.527 61.781 202.263 61.1451 201.794 60.6763 cv
201.326 60.2075 200.69 59.944 200.027 59.944 cv
199.364 59.944 198.728 60.2075 198.259 60.6763 cv
197.79 61.1451 197.527 61.781 197.527 62.444 cv
197.527 63.1071 197.79 63.743 198.259 64.2118 cv
198.728 64.6806 199.364 64.944 200.027 64.944 cv
cp
f
200.027 64.944 mo
200.69 64.944 201.326 64.6806 201.794 64.2118 cv
202.263 63.743 202.527 63.1071 202.527 62.444 cv
202.527 61.781 202.263 61.1451 201.794 60.6763 cv
201.326 60.2075 200.69 59.944 200.027 59.944 cv
199.364 59.944 198.728 60.2075 198.259 60.6763 cv
197.79 61.1451 197.527 61.781 197.527 62.444 cv
197.527 63.1071 197.79 63.743 198.259 64.2118 cv
198.728 64.6806 199.364 64.944 200.027 64.944 cv
cp
@
206.438 65.7649 mo
207.101 65.7649 207.737 65.5015 208.206 65.0327 cv
208.674 64.5638 208.938 63.9279 208.938 63.2649 cv
208.938 62.6019 208.674 61.9659 208.206 61.4971 cv
207.737 61.0283 207.101 60.7649 206.438 60.7649 cv
205.775 60.7649 205.139 61.0283 204.67 61.4971 cv
204.201 61.9659 203.938 62.6019 203.938 63.2649 cv
203.938 63.9279 204.201 64.5638 204.67 65.0327 cv
205.139 65.5015 205.775 65.7649 206.438 65.7649 cv
cp
f
206.438 65.7649 mo
207.101 65.7649 207.737 65.5015 208.206 65.0327 cv
208.674 64.5638 208.938 63.9279 208.938 63.2649 cv
208.938 62.6019 208.674 61.9659 208.206 61.4971 cv
207.737 61.0283 207.101 60.7649 206.438 60.7649 cv
205.775 60.7649 205.139 61.0283 204.67 61.4971 cv
204.201 61.9659 203.938 62.6019 203.938 63.2649 cv
203.938 63.9279 204.201 64.5638 204.67 65.0327 cv
205.139 65.5015 205.775 65.7649 206.438 65.7649 cv
cp
@
212.849 66.585 mo
213.512 66.585 214.148 66.3216 214.617 65.8528 cv
215.086 65.384 215.349 64.748 215.349 64.085 cv
215.349 63.422 215.086 62.7861 214.617 62.3173 cv
214.148 61.8484 213.512 61.585 212.849 61.585 cv
212.186 61.585 211.55 61.8484 211.081 62.3173 cv
210.613 62.7861 210.349 63.422 210.349 64.085 cv
210.349 64.748 210.613 65.384 211.081 65.8528 cv
211.55 66.3216 212.186 66.585 212.849 66.585 cv
cp
f
212.849 66.585 mo
213.512 66.585 214.148 66.3216 214.617 65.8528 cv
215.086 65.384 215.349 64.748 215.349 64.085 cv
215.349 63.422 215.086 62.7861 214.617 62.3173 cv
214.148 61.8484 213.512 61.585 212.849 61.585 cv
212.186 61.585 211.55 61.8484 211.081 62.3173 cv
210.613 62.7861 210.349 63.422 210.349 64.085 cv
210.349 64.748 210.613 65.384 211.081 65.8528 cv
211.55 66.3216 212.186 66.585 212.849 66.585 cv
cp
@
222.466 67.8144 mo
223.129 67.8144 223.765 67.551 224.234 67.0822 cv
224.703 66.6134 224.966 65.9774 224.966 65.3144 cv
224.966 64.6514 224.703 64.0155 224.234 63.5467 cv
223.765 63.0779 223.129 62.8144 222.466 62.8144 cv
221.803 62.8144 221.167 63.0779 220.698 63.5467 cv
220.229 64.0155 219.966 64.6514 219.966 65.3144 cv
219.966 65.9774 220.229 66.6134 220.698 67.0822 cv
221.167 67.551 221.803 67.8144 222.466 67.8144 cv
cp
f
222.466 67.8144 mo
223.129 67.8144 223.765 67.551 224.234 67.0822 cv
224.703 66.6134 224.966 65.9774 224.966 65.3144 cv
224.966 64.6514 224.703 64.0155 224.234 63.5467 cv
223.765 63.0779 223.129 62.8144 222.466 62.8144 cv
221.803 62.8144 221.167 63.0779 220.698 63.5467 cv
220.229 64.0155 219.966 64.6514 219.966 65.3144 cv
219.966 65.9774 220.229 66.6134 220.698 67.0822 cv
221.167 67.551 221.803 67.8144 222.466 67.8144 cv
cp
@
236.891 69.6578 mo
237.554 69.6578 238.19 69.3944 238.659 68.9256 cv
239.128 68.4568 239.391 67.8208 239.391 67.1578 cv
239.391 66.4948 239.128 65.8589 238.659 65.39 cv
238.19 64.9212 237.554 64.6578 236.891 64.6578 cv
236.228 64.6578 235.592 64.9212 235.124 65.39 cv
234.655 65.8589 234.391 66.4948 234.391 67.1578 cv
234.391 67.8208 234.655 68.4568 235.124 68.9256 cv
235.592 69.3944 236.228 69.6578 236.891 69.6578 cv
cp
f
236.891 69.6578 mo
237.554 69.6578 238.19 69.3944 238.659 68.9256 cv
239.128 68.4568 239.391 67.8208 239.391 67.1578 cv
239.391 66.4948 239.128 65.8589 238.659 65.39 cv
238.19 64.9212 237.554 64.6578 236.891 64.6578 cv
236.228 64.6578 235.592 64.9212 235.124 65.39 cv
234.655 65.8589 234.391 66.4948 234.391 67.1578 cv
234.391 67.8208 234.655 68.4568 235.124 68.9256 cv
235.592 69.3944 236.228 69.6578 236.891 69.6578 cv
cp
@
258.529 72.4225 mo
259.192 72.4225 259.828 72.1591 260.297 71.6903 cv
260.766 71.2215 261.029 70.5855 261.029 69.9225 cv
261.029 69.2595 260.766 68.6236 260.297 68.1548 cv
259.828 67.6859 259.192 67.4225 258.529 67.4225 cv
257.866 67.4225 257.23 67.6859 256.762 68.1548 cv
256.293 68.6236 256.029 69.2595 256.029 69.9225 cv
256.029 70.5855 256.293 71.2215 256.762 71.6903 cv
257.23 72.1591 257.866 72.4225 258.529 72.4225 cv
cp
f
258.529 72.4225 mo
259.192 72.4225 259.828 72.1591 260.297 71.6903 cv
260.766 71.2215 261.029 70.5855 261.029 69.9225 cv
261.029 69.2595 260.766 68.6236 260.297 68.1548 cv
259.828 67.6859 259.192 67.4225 258.529 67.4225 cv
257.866 67.4225 257.23 67.6859 256.762 68.1548 cv
256.293 68.6236 256.029 69.2595 256.029 69.9225 cv
256.029 70.5855 256.293 71.2215 256.762 71.6903 cv
257.23 72.1591 257.866 72.4225 258.529 72.4225 cv
cp
@
290.986 76.5745 mo
291.649 76.5745 292.285 76.3111 292.754 75.8423 cv
293.223 75.3735 293.486 74.7375 293.486 74.0745 cv
293.486 73.4115 293.223 72.7756 292.754 72.3068 cv
292.285 71.838 291.649 71.5745 290.986 71.5745 cv
290.323 71.5745 289.687 71.838 289.218 72.3068 cv
288.75 72.7756 288.486 73.4115 288.486 74.0745 cv
288.486 74.7375 288.75 75.3735 289.218 75.8423 cv
289.687 76.3111 290.323 76.5745 290.986 76.5745 cv
cp
f
290.986 76.5745 mo
291.649 76.5745 292.285 76.3111 292.754 75.8423 cv
293.223 75.3735 293.486 74.7375 293.486 74.0745 cv
293.486 73.4115 293.223 72.7756 292.754 72.3068 cv
292.285 71.838 291.649 71.5745 290.986 71.5745 cv
290.323 71.5745 289.687 71.838 289.218 72.3068 cv
288.75 72.7756 288.486 73.4115 288.486 74.0745 cv
288.486 74.7375 288.75 75.3735 289.218 75.8423 cv
289.687 76.3111 290.323 76.5745 290.986 76.5745 cv
cp
@
339.672 82.8175 mo
340.335 82.8175 340.971 82.554 341.439 82.0852 cv
341.908 81.6164 342.172 80.9805 342.172 80.3175 cv
342.172 79.6544 341.908 79.0185 341.439 78.5497 cv
340.971 78.0809 340.335 77.8175 339.672 77.8175 cv
339.009 77.8175 338.373 78.0809 337.904 78.5497 cv
337.435 79.0185 337.172 79.6544 337.172 80.3175 cv
337.172 80.9805 337.435 81.6164 337.904 82.0852 cv
338.373 82.554 339.009 82.8175 339.672 82.8175 cv
cp
f
339.672 82.8175 mo
340.335 82.8175 340.971 82.554 341.439 82.0852 cv
341.908 81.6164 342.172 80.9805 342.172 80.3175 cv
342.172 79.6544 341.908 79.0185 341.439 78.5497 cv
340.971 78.0809 340.335 77.8175 339.672 77.8175 cv
339.009 77.8175 338.373 78.0809 337.904 78.5497 cv
337.435 79.0185 337.172 79.6544 337.172 80.3175 cv
337.172 80.9805 337.435 81.6164 337.904 82.0852 cv
338.373 82.554 339.009 82.8175 339.672 82.8175 cv
cp
@
388.357 89.0954 mo
389.02 89.0954 389.656 88.832 390.125 88.3632 cv
390.594 87.8943 390.857 87.2584 390.857 86.5954 cv
390.857 85.9324 390.594 85.2964 390.125 84.8276 cv
389.656 84.3588 389.02 84.0954 388.357 84.0954 cv
387.694 84.0954 387.058 84.3588 386.589 84.8276 cv
386.121 85.2964 385.857 85.9324 385.857 86.5954 cv
385.857 87.2584 386.121 87.8943 386.589 88.3632 cv
387.058 88.832 387.694 89.0954 388.357 89.0954 cv
cp
f
388.357 89.0954 mo
389.02 89.0954 389.656 88.832 390.125 88.3632 cv
390.594 87.8943 390.857 87.2584 390.857 86.5954 cv
390.857 85.9324 390.594 85.2964 390.125 84.8276 cv
389.656 84.3588 389.02 84.0954 388.357 84.0954 cv
387.694 84.0954 387.058 84.3588 386.589 84.8276 cv
386.121 85.2964 385.857 85.9324 385.857 86.5954 cv
385.857 87.2584 386.121 87.8943 386.589 88.3632 cv
387.058 88.832 387.694 89.0954 388.357 89.0954 cv
cp
@
437.043 95.4514 mo
437.706 95.4514 438.341 95.1879 438.81 94.7191 cv
439.279 94.2503 439.543 93.6143 439.543 92.9514 cv
439.543 92.2883 439.279 91.6524 438.81 91.1836 cv
438.341 90.7148 437.706 90.4514 437.043 90.4514 cv
436.38 90.4514 435.744 90.7148 435.275 91.1836 cv
434.806 91.6524 434.543 92.2883 434.543 92.9514 cv
434.543 93.6143 434.806 94.2503 435.275 94.7191 cv
435.744 95.1879 436.38 95.4514 437.043 95.4514 cv
cp
f
437.043 95.4514 mo
437.706 95.4514 438.341 95.1879 438.81 94.7191 cv
439.279 94.2503 439.543 93.6143 439.543 92.9514 cv
439.543 92.2883 439.279 91.6524 438.81 91.1836 cv
438.341 90.7148 437.706 90.4514 437.043 90.4514 cv
436.38 90.4514 435.744 90.7148 435.275 91.1836 cv
434.806 91.6524 434.543 92.2883 434.543 92.9514 cv
434.543 93.6143 434.806 94.2503 435.275 94.7191 cv
435.744 95.1879 436.38 95.4514 437.043 95.4514 cv
cp
@
449.214 97.073 mo
449.877 97.073 450.513 96.8096 450.982 96.3408 cv
451.45 95.8719 451.714 95.236 451.714 94.573 cv
451.714 93.91 451.45 93.274 450.982 92.8052 cv
450.513 92.3364 449.877 92.073 449.214 92.073 cv
448.551 92.073 447.915 92.3364 447.446 92.8052 cv
446.977 93.274 446.714 93.91 446.714 94.573 cv
446.714 95.236 446.977 95.8719 447.446 96.3408 cv
447.915 96.8096 448.551 97.073 449.214 97.073 cv
cp
f
449.214 97.073 mo
449.877 97.073 450.513 96.8096 450.982 96.3408 cv
451.45 95.8719 451.714 95.236 451.714 94.573 cv
451.714 93.91 451.45 93.274 450.982 92.8052 cv
450.513 92.3364 449.877 92.073 449.214 92.073 cv
448.551 92.073 447.915 92.3364 447.446 92.8052 cv
446.977 93.274 446.714 93.91 446.714 94.573 cv
446.714 95.236 446.977 95.8719 447.446 96.3408 cv
447.915 96.8096 448.551 97.073 449.214 97.073 cv
cp
@
461.385 98.7467 mo
462.048 98.7467 462.684 98.4832 463.153 98.0144 cv
463.622 97.5456 463.885 96.9097 463.885 96.2467 cv
463.885 95.5836 463.622 94.9477 463.153 94.4789 cv
462.684 94.0101 462.048 93.7467 461.385 93.7467 cv
460.722 93.7467 460.086 94.0101 459.617 94.4789 cv
459.149 94.9477 458.885 95.5836 458.885 96.2467 cv
458.885 96.9097 459.149 97.5456 459.617 98.0144 cv
460.086 98.4832 460.722 98.7467 461.385 98.7467 cv
cp
f
461.385 98.7467 mo
462.048 98.7467 462.684 98.4832 463.153 98.0144 cv
463.622 97.5456 463.885 96.9097 463.885 96.2467 cv
463.885 95.5836 463.622 94.9477 463.153 94.4789 cv
462.684 94.0101 462.048 93.7467 461.385 93.7467 cv
460.722 93.7467 460.086 94.0101 459.617 94.4789 cv
459.149 94.9477 458.885 95.5836 458.885 96.2467 cv
458.885 96.9097 459.149 97.5456 459.617 98.0144 cv
460.086 98.4832 460.722 98.7467 461.385 98.7467 cv
cp
@
473.557 100.582 mo
474.22 100.582 474.856 100.319 475.324 99.85 cv
475.793 99.3812 476.057 98.7452 476.057 98.0822 cv
476.057 97.4192 475.793 96.7833 475.324 96.3145 cv
474.856 95.8456 474.22 95.5822 473.557 95.5822 cv
472.894 95.5822 472.258 95.8456 471.789 96.3145 cv
471.32 96.7833 471.057 97.4192 471.057 98.0822 cv
471.057 98.7452 471.32 99.3812 471.789 99.85 cv
472.258 100.319 472.894 100.582 473.557 100.582 cv
cp
f
473.557 100.582 mo
474.22 100.582 474.856 100.319 475.324 99.85 cv
475.793 99.3812 476.057 98.7452 476.057 98.0822 cv
476.057 97.4192 475.793 96.7833 475.324 96.3145 cv
474.856 95.8456 474.22 95.5822 473.557 95.5822 cv
472.894 95.5822 472.258 95.8456 471.789 96.3145 cv
471.32 96.7833 471.057 97.4192 471.057 98.0822 cv
471.057 98.7452 471.32 99.3812 471.789 99.85 cv
472.258 100.319 472.894 100.582 473.557 100.582 cv
cp
@
485.728 102.597 mo
486.391 102.597 487.027 102.334 487.496 101.865 cv
487.965 101.396 488.228 100.76 488.228 100.097 cv
488.228 99.4344 487.965 98.7985 487.496 98.3297 cv
487.027 97.8609 486.391 97.5974 485.728 97.5974 cv
485.065 97.5974 484.429 97.8609 483.96 98.3297 cv
483.491 98.7985 483.228 99.4344 483.228 100.097 cv
483.228 100.76 483.491 101.396 483.96 101.865 cv
484.429 102.334 485.065 102.597 485.728 102.597 cv
cp
f
485.728 102.597 mo
486.391 102.597 487.027 102.334 487.496 101.865 cv
487.965 101.396 488.228 100.76 488.228 100.097 cv
488.228 99.4344 487.965 98.7985 487.496 98.3297 cv
487.027 97.8609 486.391 97.5974 485.728 97.5974 cv
485.065 97.5974 484.429 97.8609 483.96 98.3297 cv
483.491 98.7985 483.228 99.4344 483.228 100.097 cv
483.228 100.76 483.491 101.396 483.96 101.865 cv
484.429 102.334 485.065 102.597 485.728 102.597 cv
cp
@
490.292 103.418 mo
490.955 103.418 491.591 103.155 492.06 102.686 cv
492.529 102.217 492.792 101.581 492.792 100.918 cv
492.792 100.255 492.529 99.619 492.06 99.1502 cv
491.591 98.6814 490.955 98.418 490.292 98.418 cv
489.629 98.418 488.993 98.6814 488.524 99.1502 cv
488.056 99.619 487.792 100.255 487.792 100.918 cv
487.792 101.581 488.056 102.217 488.524 102.686 cv
488.993 103.155 489.629 103.418 490.292 103.418 cv
cp
f
490.292 103.418 mo
490.955 103.418 491.591 103.155 492.06 102.686 cv
492.529 102.217 492.792 101.581 492.792 100.918 cv
492.792 100.255 492.529 99.619 492.06 99.1502 cv
491.591 98.6814 490.955 98.418 490.292 98.418 cv
489.629 98.418 488.993 98.6814 488.524 99.1502 cv
488.056 99.619 487.792 100.255 487.792 100.918 cv
487.792 101.581 488.056 102.217 488.524 102.686 cv
488.993 103.155 489.629 103.418 490.292 103.418 cv
cp
@
492.004 103.746 mo
492.667 103.746 493.303 103.483 493.772 103.014 cv
494.24 102.545 494.504 101.909 494.504 101.246 cv
494.504 100.583 494.24 99.9473 493.772 99.4785 cv
493.303 99.0097 492.667 98.7463 492.004 98.7463 cv
491.341 98.7463 490.705 99.0097 490.236 99.4785 cv
489.767 99.9473 489.504 100.583 489.504 101.246 cv
489.504 101.909 489.767 102.545 490.236 103.014 cv
490.705 103.483 491.341 103.746 492.004 103.746 cv
cp
f
492.004 103.746 mo
492.667 103.746 493.303 103.483 493.772 103.014 cv
494.24 102.545 494.504 101.909 494.504 101.246 cv
494.504 100.583 494.24 99.9473 493.772 99.4785 cv
493.303 99.0097 492.667 98.7463 492.004 98.7463 cv
491.341 98.7463 490.705 99.0097 490.236 99.4785 cv
489.767 99.9473 489.504 100.583 489.504 101.246 cv
489.504 101.909 489.767 102.545 490.236 103.014 cv
490.705 103.483 491.341 103.746 492.004 103.746 cv
cp
@
494.571 104.283 mo
495.234 104.283 495.87 104.019 496.339 103.55 cv
496.808 103.082 497.071 102.446 497.071 101.783 cv
497.071 101.12 496.808 100.484 496.339 100.015 cv
495.87 99.546 495.234 99.2826 494.571 99.2826 cv
493.908 99.2826 493.272 99.546 492.803 100.015 cv
492.335 100.484 492.071 101.12 492.071 101.783 cv
492.071 102.446 492.335 103.082 492.803 103.55 cv
493.272 104.019 493.908 104.283 494.571 104.283 cv
cp
f
494.571 104.283 mo
495.234 104.283 495.87 104.019 496.339 103.55 cv
496.808 103.082 497.071 102.446 497.071 101.783 cv
497.071 101.12 496.808 100.484 496.339 100.015 cv
495.87 99.546 495.234 99.2826 494.571 99.2826 cv
493.908 99.2826 493.272 99.546 492.803 100.015 cv
492.335 100.484 492.071 101.12 492.071 101.783 cv
492.071 102.446 492.335 103.082 492.803 103.55 cv
493.272 104.019 493.908 104.283 494.571 104.283 cv
cp
@
495.534 104.516 mo
496.197 104.516 496.833 104.253 497.302 103.784 cv
497.771 103.315 498.034 102.679 498.034 102.016 cv
498.034 101.353 497.771 100.717 497.302 100.248 cv
496.833 99.7793 496.197 99.5159 495.534 99.5159 cv
494.871 99.5159 494.235 99.7793 493.766 100.248 cv
493.297 100.717 493.034 101.353 493.034 102.016 cv
493.034 102.679 493.297 103.315 493.766 103.784 cv
494.235 104.253 494.871 104.516 495.534 104.516 cv
cp
f
495.534 104.516 mo
496.197 104.516 496.833 104.253 497.302 103.784 cv
497.771 103.315 498.034 102.679 498.034 102.016 cv
498.034 101.353 497.771 100.717 497.302 100.248 cv
496.833 99.7793 496.197 99.5159 495.534 99.5159 cv
494.871 99.5159 494.235 99.7793 493.766 100.248 cv
493.297 100.717 493.034 101.353 493.034 102.016 cv
493.034 102.679 493.297 103.315 493.766 103.784 cv
494.235 104.253 494.871 104.516 495.534 104.516 cv
cp
@
495.895 104.617 mo
496.558 104.617 497.194 104.353 497.663 103.885 cv
498.132 103.416 498.395 102.78 498.395 102.117 cv
498.395 101.454 498.132 100.818 497.663 100.349 cv
497.194 99.8802 496.558 99.6168 495.895 99.6168 cv
495.232 99.6168 494.596 99.8802 494.127 100.349 cv
493.658 100.818 493.395 101.454 493.395 102.117 cv
493.395 102.78 493.658 103.416 494.127 103.885 cv
494.596 104.353 495.232 104.617 495.895 104.617 cv
cp
f
495.895 104.617 mo
496.558 104.617 497.194 104.353 497.663 103.885 cv
498.132 103.416 498.395 102.78 498.395 102.117 cv
498.395 101.454 498.132 100.818 497.663 100.349 cv
497.194 99.8802 496.558 99.6168 495.895 99.6168 cv
495.232 99.6168 494.596 99.8802 494.127 100.349 cv
493.658 100.818 493.395 101.454 493.395 102.117 cv
493.395 102.78 493.658 103.416 494.127 103.885 cv
494.596 104.353 495.232 104.617 495.895 104.617 cv
cp
@
496.03 104.659 mo
496.693 104.659 497.329 104.396 497.798 103.927 cv
498.267 103.458 498.53 102.822 498.53 102.159 cv
498.53 101.496 498.267 100.861 497.798 100.392 cv
497.329 99.9229 496.693 99.6595 496.03 99.6595 cv
495.367 99.6595 494.731 99.9229 494.263 100.392 cv
493.794 100.861 493.53 101.496 493.53 102.159 cv
493.53 102.822 493.794 103.458 494.263 103.927 cv
494.731 104.396 495.367 104.659 496.03 104.659 cv
cp
f
496.03 104.659 mo
496.693 104.659 497.329 104.396 497.798 103.927 cv
498.267 103.458 498.53 102.822 498.53 102.159 cv
498.53 101.496 498.267 100.861 497.798 100.392 cv
497.329 99.9229 496.693 99.6595 496.03 99.6595 cv
495.367 99.6595 494.731 99.9229 494.263 100.392 cv
493.794 100.861 493.53 101.496 493.53 102.159 cv
493.53 102.822 493.794 103.458 494.263 103.927 cv
494.731 104.396 495.367 104.659 496.03 104.659 cv
cp
@
496.233 104.744 mo
496.896 104.744 497.532 104.481 498.001 104.012 cv
498.47 103.543 498.733 102.907 498.733 102.244 cv
498.733 101.581 498.47 100.945 498.001 100.476 cv
497.532 100.007 496.896 99.744 496.233 99.744 cv
495.57 99.744 494.935 100.007 494.466 100.476 cv
493.997 100.945 493.733 101.581 493.733 102.244 cv
493.733 102.907 493.997 103.543 494.466 104.012 cv
494.935 104.481 495.57 104.744 496.233 104.744 cv
cp
f
496.233 104.744 mo
496.896 104.744 497.532 104.481 498.001 104.012 cv
498.47 103.543 498.733 102.907 498.733 102.244 cv
498.733 101.581 498.47 100.945 498.001 100.476 cv
497.532 100.007 496.896 99.744 496.233 99.744 cv
495.57 99.744 494.935 100.007 494.466 100.476 cv
493.997 100.945 493.733 101.581 493.733 102.244 cv
493.733 102.907 493.997 103.543 494.466 104.012 cv
494.935 104.481 495.57 104.744 496.233 104.744 cv
cp
@
496.31 104.798 mo
496.973 104.798 497.609 104.535 498.077 104.066 cv
498.546 103.597 498.81 102.961 498.81 102.298 cv
498.81 101.635 498.546 100.999 498.077 100.53 cv
497.609 100.062 496.973 99.7982 496.31 99.7982 cv
495.647 99.7982 495.011 100.062 494.542 100.53 cv
494.073 100.999 493.81 101.635 493.81 102.298 cv
493.81 102.961 494.073 103.597 494.542 104.066 cv
495.011 104.535 495.647 104.798 496.31 104.798 cv
cp
f
496.31 104.798 mo
496.973 104.798 497.609 104.535 498.077 104.066 cv
498.546 103.597 498.81 102.961 498.81 102.298 cv
498.81 101.635 498.546 100.999 498.077 100.53 cv
497.609 100.062 496.973 99.7982 496.31 99.7982 cv
495.647 99.7982 495.011 100.062 494.542 100.53 cv
494.073 100.999 493.81 101.635 493.81 102.298 cv
493.81 102.961 494.073 103.597 494.542 104.066 cv
495.011 104.535 495.647 104.798 496.31 104.798 cv
cp
@
496.338 104.829 mo
497.001 104.829 497.637 104.565 498.106 104.096 cv
498.575 103.627 498.838 102.992 498.838 102.329 cv
498.838 101.666 498.575 101.03 498.106 100.561 cv
497.637 100.092 497.001 99.8285 496.338 99.8285 cv
495.675 99.8285 495.039 100.092 494.57 100.561 cv
494.102 101.03 493.838 101.666 493.838 102.329 cv
493.838 102.992 494.102 103.627 494.57 104.096 cv
495.039 104.565 495.675 104.829 496.338 104.829 cv
cp
f
496.338 104.829 mo
497.001 104.829 497.637 104.565 498.106 104.096 cv
498.575 103.627 498.838 102.992 498.838 102.329 cv
498.838 101.666 498.575 101.03 498.106 100.561 cv
497.637 100.092 497.001 99.8285 496.338 99.8285 cv
495.675 99.8285 495.039 100.092 494.57 100.561 cv
494.102 101.03 493.838 101.666 493.838 102.329 cv
493.838 102.992 494.102 103.627 494.57 104.096 cv
495.039 104.565 495.675 104.829 496.338 104.829 cv
cp
@
496.349 104.842 mo
497.012 104.842 497.648 104.579 498.117 104.11 cv
498.585 103.641 498.849 103.005 498.849 102.342 cv
498.849 101.679 498.585 101.043 498.117 100.574 cv
497.648 100.106 497.012 99.8423 496.349 99.8423 cv
495.686 99.8423 495.05 100.106 494.581 100.574 cv
494.112 101.043 493.849 101.679 493.849 102.342 cv
493.849 103.005 494.112 103.641 494.581 104.11 cv
495.05 104.579 495.686 104.842 496.349 104.842 cv
cp
f
496.349 104.842 mo
497.012 104.842 497.648 104.579 498.117 104.11 cv
498.585 103.641 498.849 103.005 498.849 102.342 cv
498.849 101.679 498.585 101.043 498.117 100.574 cv
497.648 100.106 497.012 99.8423 496.349 99.8423 cv
495.686 99.8423 495.05 100.106 494.581 100.574 cv
494.112 101.043 493.849 101.679 493.849 102.342 cv
493.849 103.005 494.112 103.641 494.581 104.11 cv
495.05 104.579 495.686 104.842 496.349 104.842 cv
cp
@
496.365 104.872 mo
497.028 104.872 497.664 104.609 498.133 104.14 cv
498.602 103.671 498.865 103.035 498.865 102.372 cv
498.865 101.709 498.602 101.073 498.133 100.604 cv
497.664 100.136 497.028 99.8723 496.365 99.8723 cv
495.702 99.8723 495.066 100.136 494.597 100.604 cv
494.128 101.073 493.865 101.709 493.865 102.372 cv
493.865 103.035 494.128 103.671 494.597 104.14 cv
495.066 104.609 495.702 104.872 496.365 104.872 cv
cp
f
496.365 104.872 mo
497.028 104.872 497.664 104.609 498.133 104.14 cv
498.602 103.671 498.865 103.035 498.865 102.372 cv
498.865 101.709 498.602 101.073 498.133 100.604 cv
497.664 100.136 497.028 99.8723 496.365 99.8723 cv
495.702 99.8723 495.066 100.136 494.597 100.604 cv
494.128 101.073 493.865 101.709 493.865 102.372 cv
493.865 103.035 494.128 103.671 494.597 104.14 cv
495.066 104.609 495.702 104.872 496.365 104.872 cv
cp
@
496.371 104.886 mo
497.034 104.886 497.67 104.622 498.139 104.153 cv
498.608 103.684 498.871 103.049 498.871 102.386 cv
498.871 101.723 498.608 101.087 498.139 100.618 cv
497.67 100.149 497.034 99.8855 496.371 99.8855 cv
495.708 99.8855 495.072 100.149 494.603 100.618 cv
494.134 101.087 493.871 101.723 493.871 102.386 cv
493.871 103.049 494.134 103.684 494.603 104.153 cv
495.072 104.622 495.708 104.886 496.371 104.886 cv
cp
f
496.371 104.886 mo
497.034 104.886 497.67 104.622 498.139 104.153 cv
498.608 103.684 498.871 103.049 498.871 102.386 cv
498.871 101.723 498.608 101.087 498.139 100.618 cv
497.67 100.149 497.034 99.8855 496.371 99.8855 cv
495.708 99.8855 495.072 100.149 494.603 100.618 cv
494.134 101.087 493.871 101.723 493.871 102.386 cv
493.871 103.049 494.134 103.684 494.603 104.153 cv
495.072 104.622 495.708 104.886 496.371 104.886 cv
cp
@
496.38 104.913 mo
497.043 104.913 497.679 104.649 498.148 104.181 cv
498.617 103.712 498.88 103.076 498.88 102.413 cv
498.88 101.75 498.617 101.114 498.148 100.645 cv
497.679 100.176 497.043 99.9129 496.38 99.9129 cv
495.717 99.9129 495.081 100.176 494.612 100.645 cv
494.143 101.114 493.88 101.75 493.88 102.413 cv
493.88 103.076 494.143 103.712 494.612 104.181 cv
495.081 104.649 495.717 104.913 496.38 104.913 cv
cp
f
496.38 104.913 mo
497.043 104.913 497.679 104.649 498.148 104.181 cv
498.617 103.712 498.88 103.076 498.88 102.413 cv
498.88 101.75 498.617 101.114 498.148 100.645 cv
497.679 100.176 497.043 99.9129 496.38 99.9129 cv
495.717 99.9129 495.081 100.176 494.612 100.645 cv
494.143 101.114 493.88 101.75 493.88 102.413 cv
493.88 103.076 494.143 103.712 494.612 104.181 cv
495.081 104.649 495.717 104.913 496.38 104.913 cv
cp
@
496.383 104.925 mo
497.046 104.925 497.682 104.661 498.151 104.192 cv
498.62 103.724 498.883 103.088 498.883 102.425 cv
498.883 101.762 498.62 101.126 498.151 100.657 cv
497.682 100.188 497.046 99.9247 496.383 99.9247 cv
495.72 99.9247 495.084 100.188 494.616 100.657 cv
494.147 101.126 493.883 101.762 493.883 102.425 cv
493.883 103.088 494.147 103.724 494.616 104.192 cv
495.084 104.661 495.72 104.925 496.383 104.925 cv
cp
f
496.383 104.925 mo
497.046 104.925 497.682 104.661 498.151 104.192 cv
498.62 103.724 498.883 103.088 498.883 102.425 cv
498.883 101.762 498.62 101.126 498.151 100.657 cv
497.682 100.188 497.046 99.9247 496.383 99.9247 cv
495.72 99.9247 495.084 100.188 494.616 100.657 cv
494.147 101.126 493.883 101.762 493.883 102.425 cv
493.883 103.088 494.147 103.724 494.616 104.192 cv
495.084 104.661 495.72 104.925 496.383 104.925 cv
cp
@
496.389 104.946 mo
497.052 104.946 497.687 104.683 498.156 104.214 cv
498.625 103.745 498.889 103.109 498.889 102.446 cv
498.889 101.783 498.625 101.147 498.156 100.679 cv
497.687 100.21 497.052 99.9463 496.389 99.9463 cv
495.725 99.9463 495.09 100.21 494.621 100.679 cv
494.152 101.147 493.889 101.783 493.889 102.446 cv
493.889 103.109 494.152 103.745 494.621 104.214 cv
495.09 104.683 495.725 104.946 496.389 104.946 cv
cp
f
496.389 104.946 mo
497.052 104.946 497.687 104.683 498.156 104.214 cv
498.625 103.745 498.889 103.109 498.889 102.446 cv
498.889 101.783 498.625 101.147 498.156 100.679 cv
497.687 100.21 497.052 99.9463 496.389 99.9463 cv
495.725 99.9463 495.09 100.21 494.621 100.679 cv
494.152 101.147 493.889 101.783 493.889 102.446 cv
493.889 103.109 494.152 103.745 494.621 104.214 cv
495.09 104.683 495.725 104.946 496.389 104.946 cv
cp
@
496.396 104.999 mo
497.059 104.999 497.695 104.735 498.164 104.266 cv
498.633 103.797 498.896 103.162 498.896 102.499 cv
498.896 101.836 498.633 101.2 498.164 100.731 cv
497.695 100.262 497.059 99.9985 496.396 99.9985 cv
495.733 99.9985 495.097 100.262 494.628 100.731 cv
494.16 101.2 493.896 101.836 493.896 102.499 cv
493.896 103.162 494.16 103.797 494.628 104.266 cv
495.097 104.735 495.733 104.999 496.396 104.999 cv
cp
f
496.396 104.999 mo
497.059 104.999 497.695 104.735 498.164 104.266 cv
498.633 103.797 498.896 103.162 498.896 102.499 cv
498.896 101.836 498.633 101.2 498.164 100.731 cv
497.695 100.262 497.059 99.9985 496.396 99.9985 cv
495.733 99.9985 495.097 100.262 494.628 100.731 cv
494.16 101.2 493.896 101.836 493.896 102.499 cv
493.896 103.162 494.16 103.797 494.628 104.266 cv
495.097 104.735 495.733 104.999 496.396 104.999 cv
cp
@
496.399 105.022 mo
497.062 105.022 497.698 104.759 498.167 104.29 cv
498.636 103.821 498.899 103.185 498.899 102.522 cv
498.899 101.859 498.636 101.223 498.167 100.754 cv
497.698 100.286 497.062 100.022 496.399 100.022 cv
495.736 100.022 495.1 100.286 494.631 100.754 cv
494.162 101.223 493.899 101.859 493.899 102.522 cv
493.899 103.185 494.162 103.821 494.631 104.29 cv
495.1 104.759 495.736 105.022 496.399 105.022 cv
cp
f
496.399 105.022 mo
497.062 105.022 497.698 104.759 498.167 104.29 cv
498.636 103.821 498.899 103.185 498.899 102.522 cv
498.899 101.859 498.636 101.223 498.167 100.754 cv
497.698 100.286 497.062 100.022 496.399 100.022 cv
495.736 100.022 495.1 100.286 494.631 100.754 cv
494.162 101.223 493.899 101.859 493.899 102.522 cv
493.899 103.185 494.162 103.821 494.631 104.29 cv
495.1 104.759 495.736 105.022 496.399 105.022 cv
cp
@
496.403 105.072 mo
497.066 105.072 497.702 104.809 498.171 104.34 cv
498.64 103.871 498.903 103.235 498.903 102.572 cv
498.903 101.909 498.64 101.273 498.171 100.804 cv
497.702 100.335 497.066 100.072 496.403 100.072 cv
495.74 100.072 495.104 100.335 494.635 100.804 cv
494.167 101.273 493.903 101.909 493.903 102.572 cv
493.903 103.235 494.167 103.871 494.635 104.34 cv
495.104 104.809 495.74 105.072 496.403 105.072 cv
cp
f
496.403 105.072 mo
497.066 105.072 497.702 104.809 498.171 104.34 cv
498.64 103.871 498.903 103.235 498.903 102.572 cv
498.903 101.909 498.64 101.273 498.171 100.804 cv
497.702 100.335 497.066 100.072 496.403 100.072 cv
495.74 100.072 495.104 100.335 494.635 100.804 cv
494.167 101.273 493.903 101.909 493.903 102.572 cv
493.903 103.235 494.167 103.871 494.635 104.34 cv
495.104 104.809 495.74 105.072 496.403 105.072 cv
cp
@
496.41 105.277 mo
497.073 105.277 497.709 105.013 498.177 104.544 cv
498.646 104.076 498.91 103.44 498.91 102.777 cv
498.91 102.114 498.646 101.478 498.177 101.009 cv
497.709 100.54 497.073 100.277 496.41 100.277 cv
495.747 100.277 495.111 100.54 494.642 101.009 cv
494.173 101.478 493.91 102.114 493.91 102.777 cv
493.91 103.44 494.173 104.076 494.642 104.544 cv
495.111 105.013 495.747 105.277 496.41 105.277 cv
cp
f
496.41 105.277 mo
497.073 105.277 497.709 105.013 498.177 104.544 cv
498.646 104.076 498.91 103.44 498.91 102.777 cv
498.91 102.114 498.646 101.478 498.177 101.009 cv
497.709 100.54 497.073 100.277 496.41 100.277 cv
495.747 100.277 495.111 100.54 494.642 101.009 cv
494.173 101.478 493.91 102.114 493.91 102.777 cv
493.91 103.44 494.173 104.076 494.642 104.544 cv
495.111 105.013 495.747 105.277 496.41 105.277 cv
cp
@
496.412 105.391 mo
497.075 105.391 497.711 105.128 498.18 104.659 cv
498.649 104.19 498.912 103.554 498.912 102.891 cv
498.912 102.228 498.649 101.592 498.18 101.123 cv
497.711 100.654 497.075 100.391 496.412 100.391 cv
495.749 100.391 495.113 100.654 494.644 101.123 cv
494.176 101.592 493.912 102.228 493.912 102.891 cv
493.912 103.554 494.176 104.19 494.644 104.659 cv
495.113 105.128 495.749 105.391 496.412 105.391 cv
cp
f
496.412 105.391 mo
497.075 105.391 497.711 105.128 498.18 104.659 cv
498.649 104.19 498.912 103.554 498.912 102.891 cv
498.912 102.228 498.649 101.592 498.18 101.123 cv
497.711 100.654 497.075 100.391 496.412 100.391 cv
495.749 100.391 495.113 100.654 494.644 101.123 cv
494.176 101.592 493.912 102.228 493.912 102.891 cv
493.912 103.554 494.176 104.19 494.644 104.659 cv
495.113 105.128 495.749 105.391 496.412 105.391 cv
cp
@
496.416 105.789 mo
497.079 105.789 497.715 105.526 498.184 105.057 cv
498.652 104.588 498.916 103.952 498.916 103.289 cv
498.916 102.626 498.652 101.99 498.184 101.521 cv
497.715 101.052 497.079 100.789 496.416 100.789 cv
495.753 100.789 495.117 101.052 494.648 101.521 cv
494.179 101.99 493.916 102.626 493.916 103.289 cv
493.916 103.952 494.179 104.588 494.648 105.057 cv
495.117 105.526 495.753 105.789 496.416 105.789 cv
cp
f
496.416 105.789 mo
497.079 105.789 497.715 105.526 498.184 105.057 cv
498.652 104.588 498.916 103.952 498.916 103.289 cv
498.916 102.626 498.652 101.99 498.184 101.521 cv
497.715 101.052 497.079 100.789 496.416 100.789 cv
495.753 100.789 495.117 101.052 494.648 101.521 cv
494.179 101.99 493.916 102.626 493.916 103.289 cv
493.916 103.952 494.179 104.588 494.648 105.057 cv
495.117 105.526 495.753 105.789 496.416 105.789 cv
cp
@
496.421 108.114 mo
497.084 108.114 497.72 107.85 498.189 107.381 cv
498.658 106.913 498.921 106.277 498.921 105.614 cv
498.921 104.951 498.658 104.315 498.189 103.846 cv
497.72 103.377 497.084 103.114 496.421 103.114 cv
495.758 103.114 495.122 103.377 494.653 103.846 cv
494.185 104.315 493.921 104.951 493.921 105.614 cv
493.921 106.277 494.185 106.913 494.653 107.381 cv
495.122 107.85 495.758 108.114 496.421 108.114 cv
cp
f
496.421 108.114 mo
497.084 108.114 497.72 107.85 498.189 107.381 cv
498.658 106.913 498.921 106.277 498.921 105.614 cv
498.921 104.951 498.658 104.315 498.189 103.846 cv
497.72 103.377 497.084 103.114 496.421 103.114 cv
495.758 103.114 495.122 103.377 494.653 103.846 cv
494.185 104.315 493.921 104.951 493.921 105.614 cv
493.921 106.277 494.185 106.913 494.653 107.381 cv
495.122 107.85 495.758 108.114 496.421 108.114 cv
cp
@
496.427 111.738 mo
497.09 111.738 497.726 111.474 498.194 111.006 cv
498.663 110.537 498.927 109.901 498.927 109.238 cv
498.927 108.575 498.663 107.939 498.194 107.47 cv
497.726 107.001 497.09 106.738 496.427 106.738 cv
495.764 106.738 495.128 107.001 494.659 107.47 cv
494.19 107.939 493.927 108.575 493.927 109.238 cv
493.927 109.901 494.19 110.537 494.659 111.006 cv
495.128 111.474 495.764 111.738 496.427 111.738 cv
cp
f
496.427 111.738 mo
497.09 111.738 497.726 111.474 498.194 111.006 cv
498.663 110.537 498.927 109.901 498.927 109.238 cv
498.927 108.575 498.663 107.939 498.194 107.47 cv
497.726 107.001 497.09 106.738 496.427 106.738 cv
495.764 106.738 495.128 107.001 494.659 107.47 cv
494.19 107.939 493.927 108.575 493.927 109.238 cv
493.927 109.901 494.19 110.537 494.659 111.006 cv
495.128 111.474 495.764 111.738 496.427 111.738 cv
cp
@
496.432 115.397 mo
497.095 115.397 497.731 115.133 498.2 114.664 cv
498.669 114.196 498.932 113.56 498.932 112.897 cv
498.932 112.234 498.669 111.598 498.2 111.129 cv
497.731 110.66 497.095 110.397 496.432 110.397 cv
495.769 110.397 495.133 110.66 494.664 111.129 cv
494.195 111.598 493.932 112.234 493.932 112.897 cv
493.932 113.56 494.195 114.196 494.664 114.664 cv
495.133 115.133 495.769 115.397 496.432 115.397 cv
cp
f
496.432 115.397 mo
497.095 115.397 497.731 115.133 498.2 114.664 cv
498.669 114.196 498.932 113.56 498.932 112.897 cv
498.932 112.234 498.669 111.598 498.2 111.129 cv
497.731 110.66 497.095 110.397 496.432 110.397 cv
495.769 110.397 495.133 110.66 494.664 111.129 cv
494.195 111.598 493.932 112.234 493.932 112.897 cv
493.932 113.56 494.195 114.196 494.664 114.664 cv
495.133 115.133 495.769 115.397 496.432 115.397 cv
cp
@
496.44 119.699 mo
497.103 119.699 497.739 119.435 498.208 118.966 cv
498.677 118.498 498.94 117.862 498.94 117.199 cv
498.94 116.536 498.677 115.9 498.208 115.431 cv
497.739 114.962 497.103 114.699 496.44 114.699 cv
495.777 114.699 495.141 114.962 494.672 115.431 cv
494.204 115.9 493.94 116.536 493.94 117.199 cv
493.94 117.862 494.204 118.498 494.672 118.966 cv
495.141 119.435 495.777 119.699 496.44 119.699 cv
cp
f
496.44 119.699 mo
497.103 119.699 497.739 119.435 498.208 118.966 cv
498.677 118.498 498.94 117.862 498.94 117.199 cv
498.94 116.536 498.677 115.9 498.208 115.431 cv
497.739 114.962 497.103 114.699 496.44 114.699 cv
495.777 114.699 495.141 114.962 494.672 115.431 cv
494.204 115.9 493.94 116.536 493.94 117.199 cv
493.94 117.862 494.204 118.498 494.672 118.966 cv
495.141 119.435 495.777 119.699 496.44 119.699 cv
cp
@
496.452 123.855 mo
497.115 123.855 497.751 123.592 498.22 123.123 cv
498.689 122.654 498.952 122.018 498.952 121.355 cv
498.952 120.692 498.689 120.056 498.22 119.587 cv
497.751 119.119 497.115 118.855 496.452 118.855 cv
495.789 118.855 495.153 119.119 494.685 119.587 cv
494.216 120.056 493.952 120.692 493.952 121.355 cv
493.952 122.018 494.216 122.654 494.685 123.123 cv
495.153 123.592 495.789 123.855 496.452 123.855 cv
cp
f
496.452 123.855 mo
497.115 123.855 497.751 123.592 498.22 123.123 cv
498.689 122.654 498.952 122.018 498.952 121.355 cv
498.952 120.692 498.689 120.056 498.22 119.587 cv
497.751 119.119 497.115 118.855 496.452 118.855 cv
495.789 118.855 495.153 119.119 494.685 119.587 cv
494.216 120.056 493.952 120.692 493.952 121.355 cv
493.952 122.018 494.216 122.654 494.685 123.123 cv
495.153 123.592 495.789 123.855 496.452 123.855 cv
cp
@
496.471 127.065 mo
497.134 127.065 497.77 126.802 498.238 126.333 cv
498.707 125.864 498.971 125.228 498.971 124.565 cv
498.971 123.902 498.707 123.266 498.238 122.797 cv
497.77 122.329 497.134 122.065 496.471 122.065 cv
495.808 122.065 495.172 122.329 494.703 122.797 cv
494.234 123.266 493.971 123.902 493.971 124.565 cv
493.971 125.228 494.234 125.864 494.703 126.333 cv
495.172 126.802 495.808 127.065 496.471 127.065 cv
cp
f
496.471 127.065 mo
497.134 127.065 497.77 126.802 498.238 126.333 cv
498.707 125.864 498.971 125.228 498.971 124.565 cv
498.971 123.902 498.707 123.266 498.238 122.797 cv
497.77 122.329 497.134 122.065 496.471 122.065 cv
495.808 122.065 495.172 122.329 494.703 122.797 cv
494.234 123.266 493.971 123.902 493.971 124.565 cv
493.971 125.228 494.234 125.864 494.703 126.333 cv
495.172 126.802 495.808 127.065 496.471 127.065 cv
cp
@
496.498 128.971 mo
497.161 128.971 497.797 128.707 498.266 128.238 cv
498.735 127.77 498.998 127.134 498.998 126.471 cv
498.998 125.808 498.735 125.172 498.266 124.703 cv
497.797 124.234 497.161 123.971 496.498 123.971 cv
495.835 123.971 495.199 124.234 494.73 124.703 cv
494.262 125.172 493.998 125.808 493.998 126.471 cv
493.998 127.134 494.262 127.77 494.73 128.238 cv
495.199 128.707 495.835 128.971 496.498 128.971 cv
cp
f
496.498 128.971 mo
497.161 128.971 497.797 128.707 498.266 128.238 cv
498.735 127.77 498.998 127.134 498.998 126.471 cv
498.998 125.808 498.735 125.172 498.266 124.703 cv
497.797 124.234 497.161 123.971 496.498 123.971 cv
495.835 123.971 495.199 124.234 494.73 124.703 cv
494.262 125.172 493.998 125.808 493.998 126.471 cv
493.998 127.134 494.262 127.77 494.73 128.238 cv
495.199 128.707 495.835 128.971 496.498 128.971 cv
cp
@
496.539 129.832 mo
497.202 129.832 497.838 129.568 498.307 129.1 cv
498.776 128.631 499.039 127.995 499.039 127.332 cv
499.039 126.669 498.776 126.033 498.307 125.564 cv
497.838 125.095 497.202 124.832 496.539 124.832 cv
495.876 124.832 495.24 125.095 494.772 125.564 cv
494.303 126.033 494.039 126.669 494.039 127.332 cv
494.039 127.995 494.303 128.631 494.772 129.1 cv
495.24 129.568 495.876 129.832 496.539 129.832 cv
cp
f
496.539 129.832 mo
497.202 129.832 497.838 129.568 498.307 129.1 cv
498.776 128.631 499.039 127.995 499.039 127.332 cv
499.039 126.669 498.776 126.033 498.307 125.564 cv
497.838 125.095 497.202 124.832 496.539 124.832 cv
495.876 124.832 495.24 125.095 494.772 125.564 cv
494.303 126.033 494.039 126.669 494.039 127.332 cv
494.039 127.995 494.303 128.631 494.772 129.1 cv
495.24 129.568 495.876 129.832 496.539 129.832 cv
cp
@
496.601 130.15 mo
497.264 130.15 497.9 129.887 498.369 129.418 cv
498.838 128.949 499.101 128.313 499.101 127.65 cv
499.101 126.987 498.838 126.351 498.369 125.882 cv
497.9 125.414 497.264 125.15 496.601 125.15 cv
495.938 125.15 495.302 125.414 494.833 125.882 cv
494.365 126.351 494.101 126.987 494.101 127.65 cv
494.101 128.313 494.365 128.949 494.833 129.418 cv
495.302 129.887 495.938 130.15 496.601 130.15 cv
cp
f
496.601 130.15 mo
497.264 130.15 497.9 129.887 498.369 129.418 cv
498.838 128.949 499.101 128.313 499.101 127.65 cv
499.101 126.987 498.838 126.351 498.369 125.882 cv
497.9 125.414 497.264 125.15 496.601 125.15 cv
495.938 125.15 495.302 125.414 494.833 125.882 cv
494.365 126.351 494.101 126.987 494.101 127.65 cv
494.101 128.313 494.365 128.949 494.833 129.418 cv
495.302 129.887 495.938 130.15 496.601 130.15 cv
cp
@
496.694 130.291 mo
497.357 130.291 497.993 130.027 498.462 129.558 cv
498.931 129.09 499.194 128.454 499.194 127.791 cv
499.194 127.128 498.931 126.492 498.462 126.023 cv
497.993 125.554 497.357 125.291 496.694 125.291 cv
496.031 125.291 495.395 125.554 494.926 126.023 cv
494.457 126.492 494.194 127.128 494.194 127.791 cv
494.194 128.454 494.457 129.09 494.926 129.558 cv
495.395 130.027 496.031 130.291 496.694 130.291 cv
cp
f
496.694 130.291 mo
497.357 130.291 497.993 130.027 498.462 129.558 cv
498.931 129.09 499.194 128.454 499.194 127.791 cv
499.194 127.128 498.931 126.492 498.462 126.023 cv
497.993 125.554 497.357 125.291 496.694 125.291 cv
496.031 125.291 495.395 125.554 494.926 126.023 cv
494.457 126.492 494.194 127.128 494.194 127.791 cv
494.194 128.454 494.457 129.09 494.926 129.558 cv
495.395 130.027 496.031 130.291 496.694 130.291 cv
cp
@
496.833 130.418 mo
497.496 130.418 498.132 130.155 498.601 129.686 cv
499.07 129.217 499.333 128.581 499.333 127.918 cv
499.333 127.255 499.07 126.619 498.601 126.15 cv
498.132 125.682 497.496 125.418 496.833 125.418 cv
496.17 125.418 495.534 125.682 495.065 126.15 cv
494.596 126.619 494.333 127.255 494.333 127.918 cv
494.333 128.581 494.596 129.217 495.065 129.686 cv
495.534 130.155 496.17 130.418 496.833 130.418 cv
cp
f
496.833 130.418 mo
497.496 130.418 498.132 130.155 498.601 129.686 cv
499.07 129.217 499.333 128.581 499.333 127.918 cv
499.333 127.255 499.07 126.619 498.601 126.15 cv
498.132 125.682 497.496 125.418 496.833 125.418 cv
496.17 125.418 495.534 125.682 495.065 126.15 cv
494.596 126.619 494.333 127.255 494.333 127.918 cv
494.333 128.581 494.596 129.217 495.065 129.686 cv
495.534 130.155 496.17 130.418 496.833 130.418 cv
cp
@
497.042 130.595 mo
497.705 130.595 498.341 130.331 498.81 129.863 cv
499.278 129.394 499.542 128.758 499.542 128.095 cv
499.542 127.432 499.278 126.796 498.81 126.327 cv
498.341 125.858 497.705 125.595 497.042 125.595 cv
496.379 125.595 495.743 125.858 495.274 126.327 cv
494.805 126.796 494.542 127.432 494.542 128.095 cv
494.542 128.758 494.805 129.394 495.274 129.863 cv
495.743 130.331 496.379 130.595 497.042 130.595 cv
cp
f
497.042 130.595 mo
497.705 130.595 498.341 130.331 498.81 129.863 cv
499.278 129.394 499.542 128.758 499.542 128.095 cv
499.542 127.432 499.278 126.796 498.81 126.327 cv
498.341 125.858 497.705 125.595 497.042 125.595 cv
496.379 125.595 495.743 125.858 495.274 126.327 cv
494.805 126.796 494.542 127.432 494.542 128.095 cv
494.542 128.758 494.805 129.394 495.274 129.863 cv
495.743 130.331 496.379 130.595 497.042 130.595 cv
cp
@
497.355 130.859 mo
498.018 130.859 498.654 130.596 499.122 130.127 cv
499.591 129.658 499.855 129.022 499.855 128.359 cv
499.855 127.696 499.591 127.06 499.122 126.591 cv
498.654 126.123 498.018 125.859 497.355 125.859 cv
496.692 125.859 496.056 126.123 495.587 126.591 cv
495.118 127.06 494.855 127.696 494.855 128.359 cv
494.855 129.022 495.118 129.658 495.587 130.127 cv
496.056 130.596 496.692 130.859 497.355 130.859 cv
cp
f
497.355 130.859 mo
498.018 130.859 498.654 130.596 499.122 130.127 cv
499.591 129.658 499.855 129.022 499.855 128.359 cv
499.855 127.696 499.591 127.06 499.122 126.591 cv
498.654 126.123 498.018 125.859 497.355 125.859 cv
496.692 125.859 496.056 126.123 495.587 126.591 cv
495.118 127.06 494.855 127.696 494.855 128.359 cv
494.855 129.022 495.118 129.658 495.587 130.127 cv
496.056 130.596 496.692 130.859 497.355 130.859 cv
cp
@
497.824 131.257 mo
498.487 131.257 499.123 130.994 499.592 130.525 cv
500.061 130.056 500.324 129.42 500.324 128.757 cv
500.324 128.094 500.061 127.458 499.592 126.99 cv
499.123 126.521 498.487 126.257 497.824 126.257 cv
497.161 126.257 496.525 126.521 496.056 126.99 cv
495.588 127.458 495.324 128.094 495.324 128.757 cv
495.324 129.42 495.588 130.056 496.056 130.525 cv
496.525 130.994 497.161 131.257 497.824 131.257 cv
cp
f
497.824 131.257 mo
498.487 131.257 499.123 130.994 499.592 130.525 cv
500.061 130.056 500.324 129.42 500.324 128.757 cv
500.324 128.094 500.061 127.458 499.592 126.99 cv
499.123 126.521 498.487 126.257 497.824 126.257 cv
497.161 126.257 496.525 126.521 496.056 126.99 cv
495.588 127.458 495.324 128.094 495.324 128.757 cv
495.324 129.42 495.588 130.056 496.056 130.525 cv
496.525 130.994 497.161 131.257 497.824 131.257 cv
cp
@
498.528 131.86 mo
499.191 131.86 499.827 131.596 500.296 131.127 cv
500.765 130.659 501.028 130.023 501.028 129.36 cv
501.028 128.697 500.765 128.061 500.296 127.592 cv
499.827 127.123 499.191 126.86 498.528 126.86 cv
497.865 126.86 497.23 127.123 496.761 127.592 cv
496.292 128.061 496.028 128.697 496.028 129.36 cv
496.028 130.023 496.292 130.659 496.761 131.127 cv
497.23 131.596 497.865 131.86 498.528 131.86 cv
cp
f
498.528 131.86 mo
499.191 131.86 499.827 131.596 500.296 131.127 cv
500.765 130.659 501.028 130.023 501.028 129.36 cv
501.028 128.697 500.765 128.061 500.296 127.592 cv
499.827 127.123 499.191 126.86 498.528 126.86 cv
497.865 126.86 497.23 127.123 496.761 127.592 cv
496.292 128.061 496.028 128.697 496.028 129.36 cv
496.028 130.023 496.292 130.659 496.761 131.127 cv
497.23 131.596 497.865 131.86 498.528 131.86 cv
cp
@
499.585 132.774 mo
500.248 132.774 500.884 132.51 501.353 132.042 cv
501.821 131.573 502.085 130.937 502.085 130.274 cv
502.085 129.611 501.821 128.975 501.353 128.506 cv
500.884 128.037 500.248 127.774 499.585 127.774 cv
498.922 127.774 498.286 128.037 497.817 128.506 cv
497.348 128.975 497.085 129.611 497.085 130.274 cv
497.085 130.937 497.348 131.573 497.817 132.042 cv
498.286 132.51 498.922 132.774 499.585 132.774 cv
cp
f
499.585 132.774 mo
500.248 132.774 500.884 132.51 501.353 132.042 cv
501.821 131.573 502.085 130.937 502.085 130.274 cv
502.085 129.611 501.821 128.975 501.353 128.506 cv
500.884 128.037 500.248 127.774 499.585 127.774 cv
498.922 127.774 498.286 128.037 497.817 128.506 cv
497.348 128.975 497.085 129.611 497.085 130.274 cv
497.085 130.937 497.348 131.573 497.817 132.042 cv
498.286 132.51 498.922 132.774 499.585 132.774 cv
cp
@
501.169 134.171 mo
501.832 134.171 502.468 133.907 502.937 133.438 cv
503.406 132.969 503.669 132.333 503.669 131.671 cv
503.669 131.007 503.406 130.372 502.937 129.903 cv
502.468 129.434 501.832 129.171 501.169 129.171 cv
500.506 129.171 499.87 129.434 499.402 129.903 cv
498.933 130.372 498.669 131.007 498.669 131.671 cv
498.669 132.333 498.933 132.969 499.402 133.438 cv
499.87 133.907 500.506 134.171 501.169 134.171 cv
cp
f
501.169 134.171 mo
501.832 134.171 502.468 133.907 502.937 133.438 cv
503.406 132.969 503.669 132.333 503.669 131.671 cv
503.669 131.007 503.406 130.372 502.937 129.903 cv
502.468 129.434 501.832 129.171 501.169 129.171 cv
500.506 129.171 499.87 129.434 499.402 129.903 cv
498.933 130.372 498.669 131.007 498.669 131.671 cv
498.669 132.333 498.933 132.969 499.402 133.438 cv
499.87 133.907 500.506 134.171 501.169 134.171 cv
cp
@
503.546 136.322 mo
504.209 136.322 504.845 136.058 505.314 135.59 cv
505.783 135.121 506.046 134.485 506.046 133.822 cv
506.046 133.159 505.783 132.523 505.314 132.054 cv
504.845 131.585 504.209 131.322 503.546 131.322 cv
502.883 131.322 502.247 131.585 501.778 132.054 cv
501.31 132.523 501.046 133.159 501.046 133.822 cv
501.046 134.485 501.31 135.121 501.778 135.59 cv
502.247 136.058 502.883 136.322 503.546 136.322 cv
cp
f
503.546 136.322 mo
504.209 136.322 504.845 136.058 505.314 135.59 cv
505.783 135.121 506.046 134.485 506.046 133.822 cv
506.046 133.159 505.783 132.523 505.314 132.054 cv
504.845 131.585 504.209 131.322 503.546 131.322 cv
502.883 131.322 502.247 131.585 501.778 132.054 cv
501.31 132.523 501.046 133.159 501.046 133.822 cv
501.046 134.485 501.31 135.121 501.778 135.59 cv
502.247 136.058 502.883 136.322 503.546 136.322 cv
cp
@
507.111 139.672 mo
507.774 139.672 508.41 139.408 508.879 138.94 cv
509.348 138.471 509.611 137.835 509.611 137.172 cv
509.611 136.509 509.348 135.873 508.879 135.404 cv
508.41 134.935 507.774 134.672 507.111 134.672 cv
506.448 134.672 505.812 134.935 505.344 135.404 cv
504.875 135.873 504.611 136.509 504.611 137.172 cv
504.611 137.835 504.875 138.471 505.344 138.94 cv
505.812 139.408 506.448 139.672 507.111 139.672 cv
cp
f
507.111 139.672 mo
507.774 139.672 508.41 139.408 508.879 138.94 cv
509.348 138.471 509.611 137.835 509.611 137.172 cv
509.611 136.509 509.348 135.873 508.879 135.404 cv
508.41 134.935 507.774 134.672 507.111 134.672 cv
506.448 134.672 505.812 134.935 505.344 135.404 cv
504.875 135.873 504.611 136.509 504.611 137.172 cv
504.611 137.835 504.875 138.471 505.344 138.94 cv
505.812 139.408 506.448 139.672 507.111 139.672 cv
cp
@
512.459 144.962 mo
513.122 144.962 513.758 144.698 514.227 144.23 cv
514.696 143.761 514.959 143.125 514.959 142.462 cv
514.959 141.799 514.696 141.163 514.227 140.694 cv
513.758 140.225 513.122 139.962 512.459 139.962 cv
511.796 139.962 511.16 140.225 510.691 140.694 cv
510.223 141.163 509.959 141.799 509.959 142.462 cv
509.959 143.125 510.223 143.761 510.691 144.23 cv
511.16 144.698 511.796 144.962 512.459 144.962 cv
cp
f
512.459 144.962 mo
513.122 144.962 513.758 144.698 514.227 144.23 cv
514.696 143.761 514.959 143.125 514.959 142.462 cv
514.959 141.799 514.696 141.163 514.227 140.694 cv
513.758 140.225 513.122 139.962 512.459 139.962 cv
511.796 139.962 511.16 140.225 510.691 140.694 cv
510.223 141.163 509.959 141.799 509.959 142.462 cv
509.959 143.125 510.223 143.761 510.691 144.23 cv
511.16 144.698 511.796 144.962 512.459 144.962 cv
cp
@
520.481 153.449 mo
521.144 153.449 521.78 153.186 522.249 152.717 cv
522.718 152.248 522.981 151.612 522.981 150.949 cv
522.981 150.286 522.718 149.651 522.249 149.182 cv
521.78 148.713 521.144 148.449 520.481 148.449 cv
519.818 148.449 519.182 148.713 518.713 149.182 cv
518.244 149.651 517.981 150.286 517.981 150.949 cv
517.981 151.612 518.244 152.248 518.713 152.717 cv
519.182 153.186 519.818 153.449 520.481 153.449 cv
cp
f
520.481 153.449 mo
521.144 153.449 521.78 153.186 522.249 152.717 cv
522.718 152.248 522.981 151.612 522.981 150.949 cv
522.981 150.286 522.718 149.651 522.249 149.182 cv
521.78 148.713 521.144 148.449 520.481 148.449 cv
519.818 148.449 519.182 148.713 518.713 149.182 cv
518.244 149.651 517.981 150.286 517.981 150.949 cv
517.981 151.612 518.244 152.248 518.713 152.717 cv
519.182 153.186 519.818 153.449 520.481 153.449 cv
cp
@
532.514 167.032 mo
533.177 167.032 533.813 166.769 534.281 166.3 cv
534.75 165.831 535.014 165.195 535.014 164.532 cv
535.014 163.869 534.75 163.233 534.281 162.764 cv
533.813 162.295 533.177 162.032 532.514 162.032 cv
531.851 162.032 531.215 162.295 530.746 162.764 cv
530.277 163.233 530.014 163.869 530.014 164.532 cv
530.014 165.195 530.277 165.831 530.746 166.3 cv
531.215 166.769 531.851 167.032 532.514 167.032 cv
cp
f
532.514 167.032 mo
533.177 167.032 533.813 166.769 534.281 166.3 cv
534.75 165.831 535.014 165.195 535.014 164.532 cv
535.014 163.869 534.75 163.233 534.281 162.764 cv
533.813 162.295 533.177 162.032 532.514 162.032 cv
531.851 162.032 531.215 162.295 530.746 162.764 cv
530.277 163.233 530.014 163.869 530.014 164.532 cv
530.014 165.195 530.277 165.831 530.746 166.3 cv
531.215 166.769 531.851 167.032 532.514 167.032 cv
cp
@
550.563 189.998 mo
551.226 189.998 551.862 189.734 552.33 189.266 cv
552.799 188.797 553.063 188.161 553.063 187.498 cv
553.063 186.835 552.799 186.199 552.33 185.73 cv
551.862 185.261 551.226 184.998 550.563 184.998 cv
549.9 184.998 549.264 185.261 548.795 185.73 cv
548.326 186.199 548.063 186.835 548.063 187.498 cv
548.063 188.161 548.326 188.797 548.795 189.266 cv
549.264 189.734 549.9 189.998 550.563 189.998 cv
cp
f
550.563 189.998 mo
551.226 189.998 551.862 189.734 552.33 189.266 cv
552.799 188.797 553.063 188.161 553.063 187.498 cv
553.063 186.835 552.799 186.199 552.33 185.73 cv
551.862 185.261 551.226 184.998 550.563 184.998 cv
549.9 184.998 549.264 185.261 548.795 185.73 cv
548.326 186.199 548.063 186.835 548.063 187.498 cv
548.063 188.161 548.326 188.797 548.795 189.266 cv
549.264 189.734 549.9 189.998 550.563 189.998 cv
cp
@
555.075 196.434 mo
555.738 196.434 556.374 196.17 556.843 195.702 cv
557.311 195.233 557.575 194.597 557.575 193.934 cv
557.575 193.271 557.311 192.635 556.843 192.166 cv
556.374 191.697 555.738 191.434 555.075 191.434 cv
554.412 191.434 553.776 191.697 553.307 192.166 cv
552.838 192.635 552.575 193.271 552.575 193.934 cv
552.575 194.597 552.838 195.233 553.307 195.702 cv
553.776 196.17 554.412 196.434 555.075 196.434 cv
cp
f
555.075 196.434 mo
555.738 196.434 556.374 196.17 556.843 195.702 cv
557.311 195.233 557.575 194.597 557.575 193.934 cv
557.575 193.271 557.311 192.635 556.843 192.166 cv
556.374 191.697 555.738 191.434 555.075 191.434 cv
554.412 191.434 553.776 191.697 553.307 192.166 cv
552.838 192.635 552.575 193.271 552.575 193.934 cv
552.575 194.597 552.838 195.233 553.307 195.702 cv
553.776 196.17 554.412 196.434 555.075 196.434 cv
cp
@
559.587 202.949 mo
560.25 202.949 560.886 202.686 561.355 202.217 cv
561.824 201.748 562.087 201.112 562.087 200.449 cv
562.087 199.786 561.824 199.151 561.355 198.682 cv
560.886 198.213 560.25 197.949 559.587 197.949 cv
558.924 197.949 558.288 198.213 557.819 198.682 cv
557.35 199.151 557.087 199.786 557.087 200.449 cv
557.087 201.112 557.35 201.748 557.819 202.217 cv
558.288 202.686 558.924 202.949 559.587 202.949 cv
cp
f
559.587 202.949 mo
560.25 202.949 560.886 202.686 561.355 202.217 cv
561.824 201.748 562.087 201.112 562.087 200.449 cv
562.087 199.786 561.824 199.151 561.355 198.682 cv
560.886 198.213 560.25 197.949 559.587 197.949 cv
558.924 197.949 558.288 198.213 557.819 198.682 cv
557.35 199.151 557.087 199.786 557.087 200.449 cv
557.087 201.112 557.35 201.748 557.819 202.217 cv
558.288 202.686 558.924 202.949 559.587 202.949 cv
cp
@
566.355 212.917 mo
567.018 212.917 567.654 212.654 568.123 212.185 cv
568.592 211.716 568.855 211.08 568.855 210.417 cv
568.855 209.754 568.592 209.118 568.123 208.649 cv
567.654 208.181 567.018 207.917 566.355 207.917 cv
565.692 207.917 565.056 208.181 564.588 208.649 cv
564.119 209.118 563.855 209.754 563.855 210.417 cv
563.855 211.08 564.119 211.716 564.588 212.185 cv
565.056 212.654 565.692 212.917 566.355 212.917 cv
cp
f
566.355 212.917 mo
567.018 212.917 567.654 212.654 568.123 212.185 cv
568.592 211.716 568.855 211.08 568.855 210.417 cv
568.855 209.754 568.592 209.118 568.123 208.649 cv
567.654 208.181 567.018 207.917 566.355 207.917 cv
565.692 207.917 565.056 208.181 564.588 208.649 cv
564.119 209.118 563.855 209.754 563.855 210.417 cv
563.855 211.08 564.119 211.716 564.588 212.185 cv
565.056 212.654 565.692 212.917 566.355 212.917 cv
cp
@
568.894 216.737 mo
569.557 216.737 570.193 216.474 570.661 216.005 cv
571.13 215.536 571.394 214.9 571.394 214.237 cv
571.394 213.574 571.13 212.938 570.661 212.469 cv
570.193 212 569.557 211.737 568.894 211.737 cv
568.231 211.737 567.595 212 567.126 212.469 cv
566.657 212.938 566.394 213.574 566.394 214.237 cv
566.394 214.9 566.657 215.536 567.126 216.005 cv
567.595 216.474 568.231 216.737 568.894 216.737 cv
cp
f
568.894 216.737 mo
569.557 216.737 570.193 216.474 570.661 216.005 cv
571.13 215.536 571.394 214.9 571.394 214.237 cv
571.394 213.574 571.13 212.938 570.661 212.469 cv
570.193 212 569.557 211.737 568.894 211.737 cv
568.231 211.737 567.595 212 567.126 212.469 cv
566.657 212.938 566.394 213.574 566.394 214.237 cv
566.394 214.9 566.657 215.536 567.126 216.005 cv
567.595 216.474 568.231 216.737 568.894 216.737 cv
cp
@
572.701 222.524 mo
573.364 222.524 574 222.26 574.469 221.792 cv
574.937 221.323 575.201 220.687 575.201 220.024 cv
575.201 219.361 574.937 218.725 574.469 218.256 cv
574 217.787 573.364 217.524 572.701 217.524 cv
572.038 217.524 571.402 217.787 570.933 218.256 cv
570.464 218.725 570.201 219.361 570.201 220.024 cv
570.201 220.687 570.464 221.323 570.933 221.792 cv
571.402 222.26 572.038 222.524 572.701 222.524 cv
cp
f
572.701 222.524 mo
573.364 222.524 574 222.26 574.469 221.792 cv
574.937 221.323 575.201 220.687 575.201 220.024 cv
575.201 219.361 574.937 218.725 574.469 218.256 cv
574 217.787 573.364 217.524 572.701 217.524 cv
572.038 217.524 571.402 217.787 570.933 218.256 cv
570.464 218.725 570.201 219.361 570.201 220.024 cv
570.201 220.687 570.464 221.323 570.933 221.792 cv
571.402 222.26 572.038 222.524 572.701 222.524 cv
cp
@
578.412 231.393 mo
579.075 231.393 579.711 231.129 580.179 230.661 cv
580.648 230.192 580.912 229.556 580.912 228.893 cv
580.912 228.23 580.648 227.594 580.179 227.125 cv
579.711 226.656 579.075 226.393 578.412 226.393 cv
577.749 226.393 577.113 226.656 576.644 227.125 cv
576.175 227.594 575.912 228.23 575.912 228.893 cv
575.912 229.556 576.175 230.192 576.644 230.661 cv
577.113 231.129 577.749 231.393 578.412 231.393 cv
cp
f
578.412 231.393 mo
579.075 231.393 579.711 231.129 580.179 230.661 cv
580.648 230.192 580.912 229.556 580.912 228.893 cv
580.912 228.23 580.648 227.594 580.179 227.125 cv
579.711 226.656 579.075 226.393 578.412 226.393 cv
577.749 226.393 577.113 226.656 576.644 227.125 cv
576.175 227.594 575.912 228.23 575.912 228.893 cv
575.912 229.556 576.175 230.192 576.644 230.661 cv
577.113 231.129 577.749 231.393 578.412 231.393 cv
cp
@
580.553 234.794 mo
581.216 234.794 581.852 234.531 582.321 234.062 cv
582.79 233.593 583.053 232.957 583.053 232.294 cv
583.053 231.631 582.79 230.995 582.321 230.526 cv
581.852 230.058 581.216 229.794 580.553 229.794 cv
579.89 229.794 579.254 230.058 578.785 230.526 cv
578.317 230.995 578.053 231.631 578.053 232.294 cv
578.053 232.957 578.317 233.593 578.785 234.062 cv
579.254 234.531 579.89 234.794 580.553 234.794 cv
cp
f
580.553 234.794 mo
581.216 234.794 581.852 234.531 582.321 234.062 cv
582.79 233.593 583.053 232.957 583.053 232.294 cv
583.053 231.631 582.79 230.995 582.321 230.526 cv
581.852 230.058 581.216 229.794 580.553 229.794 cv
579.89 229.794 579.254 230.058 578.785 230.526 cv
578.317 230.995 578.053 231.631 578.053 232.294 cv
578.053 232.957 578.317 233.593 578.785 234.062 cv
579.254 234.531 579.89 234.794 580.553 234.794 cv
cp
@
583.765 239.948 mo
584.428 239.948 585.064 239.684 585.533 239.215 cv
586.002 238.747 586.265 238.111 586.265 237.448 cv
586.265 236.785 586.002 236.149 585.533 235.68 cv
585.064 235.211 584.428 234.948 583.765 234.948 cv
583.102 234.948 582.466 235.211 581.998 235.68 cv
581.529 236.149 581.265 236.785 581.265 237.448 cv
581.265 238.111 581.529 238.747 581.998 239.215 cv
582.466 239.684 583.102 239.948 583.765 239.948 cv
cp
f
583.765 239.948 mo
584.428 239.948 585.064 239.684 585.533 239.215 cv
586.002 238.747 586.265 238.111 586.265 237.448 cv
586.265 236.785 586.002 236.149 585.533 235.68 cv
585.064 235.211 584.428 234.948 583.765 234.948 cv
583.102 234.948 582.466 235.211 581.998 235.68 cv
581.529 236.149 581.265 236.785 581.265 237.448 cv
581.265 238.111 581.529 238.747 581.998 239.215 cv
582.466 239.684 583.102 239.948 583.765 239.948 cv
cp
@
588.584 247.841 mo
589.247 247.841 589.883 247.577 590.352 247.109 cv
590.82 246.64 591.084 246.004 591.084 245.341 cv
591.084 244.678 590.82 244.042 590.352 243.573 cv
589.883 243.104 589.247 242.841 588.584 242.841 cv
587.921 242.841 587.285 243.104 586.816 243.573 cv
586.347 244.042 586.084 244.678 586.084 245.341 cv
586.084 246.004 586.347 246.64 586.816 247.109 cv
587.285 247.577 587.921 247.841 588.584 247.841 cv
cp
f
588.584 247.841 mo
589.247 247.841 589.883 247.577 590.352 247.109 cv
590.82 246.64 591.084 246.004 591.084 245.341 cv
591.084 244.678 590.82 244.042 590.352 243.573 cv
589.883 243.104 589.247 242.841 588.584 242.841 cv
587.921 242.841 587.285 243.104 586.816 243.573 cv
586.347 244.042 586.084 244.678 586.084 245.341 cv
586.084 246.004 586.347 246.64 586.816 247.109 cv
587.285 247.577 587.921 247.841 588.584 247.841 cv
cp
@
590.391 250.866 mo
591.054 250.866 591.69 250.602 592.159 250.134 cv
592.627 249.665 592.891 249.029 592.891 248.366 cv
592.891 247.703 592.627 247.067 592.159 246.598 cv
591.69 246.129 591.054 245.866 590.391 245.866 cv
589.728 245.866 589.092 246.129 588.623 246.598 cv
588.154 247.067 587.891 247.703 587.891 248.366 cv
587.891 249.029 588.154 249.665 588.623 250.134 cv
589.092 250.602 589.728 250.866 590.391 250.866 cv
cp
f
590.391 250.866 mo
591.054 250.866 591.69 250.602 592.159 250.134 cv
592.627 249.665 592.891 249.029 592.891 248.366 cv
592.891 247.703 592.627 247.067 592.159 246.598 cv
591.69 246.129 591.054 245.866 590.391 245.866 cv
589.728 245.866 589.092 246.129 588.623 246.598 cv
588.154 247.067 587.891 247.703 587.891 248.366 cv
587.891 249.029 588.154 249.665 588.623 250.134 cv
589.092 250.602 589.728 250.866 590.391 250.866 cv
cp
@
593.101 255.444 mo
593.764 255.444 594.4 255.181 594.869 254.712 cv
595.338 254.243 595.601 253.607 595.601 252.944 cv
595.601 252.281 595.338 251.645 594.869 251.176 cv
594.4 250.707 593.764 250.444 593.101 250.444 cv
592.438 250.444 591.802 250.707 591.333 251.176 cv
590.865 251.645 590.601 252.281 590.601 252.944 cv
590.601 253.607 590.865 254.243 591.333 254.712 cv
591.802 255.181 592.438 255.444 593.101 255.444 cv
cp
f
593.101 255.444 mo
593.764 255.444 594.4 255.181 594.869 254.712 cv
595.338 254.243 595.601 253.607 595.601 252.944 cv
595.601 252.281 595.338 251.645 594.869 251.176 cv
594.4 250.707 593.764 250.444 593.101 250.444 cv
592.438 250.444 591.802 250.707 591.333 251.176 cv
590.865 251.645 590.601 252.281 590.601 252.944 cv
590.601 253.607 590.865 254.243 591.333 254.712 cv
591.802 255.181 592.438 255.444 593.101 255.444 cv
cp
@
597.167 262.443 mo
597.83 262.443 598.466 262.18 598.935 261.711 cv
599.403 261.242 599.667 260.606 599.667 259.943 cv
599.667 259.28 599.403 258.644 598.935 258.175 cv
598.466 257.706 597.83 257.443 597.167 257.443 cv
596.504 257.443 595.868 257.706 595.399 258.175 cv
594.93 258.644 594.667 259.28 594.667 259.943 cv
594.667 260.606 594.93 261.242 595.399 261.711 cv
595.868 262.18 596.504 262.443 597.167 262.443 cv
cp
f
597.167 262.443 mo
597.83 262.443 598.466 262.18 598.935 261.711 cv
599.403 261.242 599.667 260.606 599.667 259.943 cv
599.667 259.28 599.403 258.644 598.935 258.175 cv
598.466 257.706 597.83 257.443 597.167 257.443 cv
596.504 257.443 595.868 257.706 595.399 258.175 cv
594.93 258.644 594.667 259.28 594.667 259.943 cv
594.667 260.606 594.93 261.242 595.399 261.711 cv
595.868 262.18 596.504 262.443 597.167 262.443 cv
cp
@
603.265 273.258 mo
603.928 273.258 604.564 272.995 605.033 272.526 cv
605.502 272.057 605.765 271.421 605.765 270.758 cv
605.765 270.095 605.502 269.459 605.033 268.991 cv
604.564 268.522 603.928 268.258 603.265 268.258 cv
602.602 268.258 601.966 268.522 601.497 268.991 cv
601.029 269.459 600.765 270.095 600.765 270.758 cv
600.765 271.421 601.029 272.057 601.497 272.526 cv
601.966 272.995 602.602 273.258 603.265 273.258 cv
cp
f
603.265 273.258 mo
603.928 273.258 604.564 272.995 605.033 272.526 cv
605.502 272.057 605.765 271.421 605.765 270.758 cv
605.765 270.095 605.502 269.459 605.033 268.991 cv
604.564 268.522 603.928 268.258 603.265 268.258 cv
602.602 268.258 601.966 268.522 601.497 268.991 cv
601.029 269.459 600.765 270.095 600.765 270.758 cv
600.765 271.421 601.029 272.057 601.497 272.526 cv
601.966 272.995 602.602 273.258 603.265 273.258 cv
cp
@
609.364 284.479 mo
610.027 284.479 610.663 284.216 611.131 283.747 cv
611.6 283.278 611.864 282.642 611.864 281.979 cv
611.864 281.316 611.6 280.68 611.131 280.211 cv
610.663 279.743 610.027 279.479 609.364 279.479 cv
608.701 279.479 608.065 279.743 607.596 280.211 cv
607.127 280.68 606.864 281.316 606.864 281.979 cv
606.864 282.642 607.127 283.278 607.596 283.747 cv
608.065 284.216 608.701 284.479 609.364 284.479 cv
cp
f
609.364 284.479 mo
610.027 284.479 610.663 284.216 611.131 283.747 cv
611.6 283.278 611.864 282.642 611.864 281.979 cv
611.864 281.316 611.6 280.68 611.131 280.211 cv
610.663 279.743 610.027 279.479 609.364 279.479 cv
608.701 279.479 608.065 279.743 607.596 280.211 cv
607.127 280.68 606.864 281.316 606.864 281.979 cv
606.864 282.642 607.127 283.278 607.596 283.747 cv
608.065 284.216 608.701 284.479 609.364 284.479 cv
cp
@
615.462 296.116 mo
616.125 296.116 616.761 295.853 617.23 295.384 cv
617.699 294.915 617.962 294.279 617.962 293.616 cv
617.962 292.953 617.699 292.318 617.23 291.849 cv
616.761 291.38 616.125 291.116 615.462 291.116 cv
614.799 291.116 614.163 291.38 613.694 291.849 cv
613.225 292.318 612.962 292.953 612.962 293.616 cv
612.962 294.279 613.225 294.915 613.694 295.384 cv
614.163 295.853 614.799 296.116 615.462 296.116 cv
cp
f
615.462 296.116 mo
616.125 296.116 616.761 295.853 617.23 295.384 cv
617.699 294.915 617.962 294.279 617.962 293.616 cv
617.962 292.953 617.699 292.318 617.23 291.849 cv
616.761 291.38 616.125 291.116 615.462 291.116 cv
614.799 291.116 614.163 291.38 613.694 291.849 cv
613.225 292.318 612.962 292.953 612.962 293.616 cv
612.962 294.279 613.225 294.915 613.694 295.384 cv
614.163 295.853 614.799 296.116 615.462 296.116 cv
cp
@
616.987 299.114 mo
617.65 299.114 618.286 298.851 618.754 298.382 cv
619.223 297.913 619.487 297.277 619.487 296.614 cv
619.487 295.951 619.223 295.315 618.754 294.846 cv
618.286 294.377 617.65 294.114 616.987 294.114 cv
616.324 294.114 615.688 294.377 615.219 294.846 cv
614.75 295.315 614.487 295.951 614.487 296.614 cv
614.487 297.277 614.75 297.913 615.219 298.382 cv
615.688 298.851 616.324 299.114 616.987 299.114 cv
cp
f
616.987 299.114 mo
617.65 299.114 618.286 298.851 618.754 298.382 cv
619.223 297.913 619.487 297.277 619.487 296.614 cv
619.487 295.951 619.223 295.315 618.754 294.846 cv
618.286 294.377 617.65 294.114 616.987 294.114 cv
616.324 294.114 615.688 294.377 615.219 294.846 cv
614.75 295.315 614.487 295.951 614.487 296.614 cv
614.487 297.277 614.75 297.913 615.219 298.382 cv
615.688 298.851 616.324 299.114 616.987 299.114 cv
cp
@
618.511 302.116 mo
619.174 302.116 619.81 301.853 620.279 301.384 cv
620.748 300.915 621.011 300.279 621.011 299.616 cv
621.011 298.953 620.748 298.317 620.279 297.849 cv
619.81 297.38 619.174 297.116 618.511 297.116 cv
617.848 297.116 617.212 297.38 616.743 297.849 cv
616.275 298.317 616.011 298.953 616.011 299.616 cv
616.011 300.279 616.275 300.915 616.743 301.384 cv
617.212 301.853 617.848 302.116 618.511 302.116 cv
cp
f
618.511 302.116 mo
619.174 302.116 619.81 301.853 620.279 301.384 cv
620.748 300.915 621.011 300.279 621.011 299.616 cv
621.011 298.953 620.748 298.317 620.279 297.849 cv
619.81 297.38 619.174 297.116 618.511 297.116 cv
617.848 297.116 617.212 297.38 616.743 297.849 cv
616.275 298.317 616.011 298.953 616.011 299.616 cv
616.011 300.279 616.275 300.915 616.743 301.384 cv
617.212 301.853 617.848 302.116 618.511 302.116 cv
cp
@
620.798 306.665 mo
621.461 306.665 622.097 306.402 622.566 305.933 cv
623.035 305.464 623.298 304.828 623.298 304.165 cv
623.298 303.502 623.035 302.866 622.566 302.398 cv
622.097 301.929 621.461 301.665 620.798 301.665 cv
620.135 301.665 619.499 301.929 619.03 302.398 cv
618.562 302.866 618.298 303.502 618.298 304.165 cv
618.298 304.828 618.562 305.464 619.03 305.933 cv
619.499 306.402 620.135 306.665 620.798 306.665 cv
cp
f
620.798 306.665 mo
621.461 306.665 622.097 306.402 622.566 305.933 cv
623.035 305.464 623.298 304.828 623.298 304.165 cv
623.298 303.502 623.035 302.866 622.566 302.398 cv
622.097 301.929 621.461 301.665 620.798 301.665 cv
620.135 301.665 619.499 301.929 619.03 302.398 cv
618.562 302.866 618.298 303.502 618.298 304.165 cv
618.298 304.828 618.562 305.464 619.03 305.933 cv
619.499 306.402 620.135 306.665 620.798 306.665 cv
cp
@
624.229 313.599 mo
624.892 313.599 625.527 313.336 625.996 312.867 cv
626.465 312.398 626.729 311.762 626.729 311.099 cv
626.729 310.436 626.465 309.8 625.996 309.331 cv
625.527 308.863 624.892 308.599 624.229 308.599 cv
623.565 308.599 622.93 308.863 622.461 309.331 cv
621.992 309.8 621.729 310.436 621.729 311.099 cv
621.729 311.762 621.992 312.398 622.461 312.867 cv
622.93 313.336 623.565 313.599 624.229 313.599 cv
cp
f
624.229 313.599 mo
624.892 313.599 625.527 313.336 625.996 312.867 cv
626.465 312.398 626.729 311.762 626.729 311.099 cv
626.729 310.436 626.465 309.8 625.996 309.331 cv
625.527 308.863 624.892 308.599 624.229 308.599 cv
623.565 308.599 622.93 308.863 622.461 309.331 cv
621.992 309.8 621.729 310.436 621.729 311.099 cv
621.729 311.762 621.992 312.398 622.461 312.867 cv
622.93 313.336 623.565 313.599 624.229 313.599 cv
cp
@
629.374 324.243 mo
630.037 324.243 630.673 323.979 631.142 323.511 cv
631.611 323.042 631.874 322.406 631.874 321.743 cv
631.874 321.08 631.611 320.444 631.142 319.975 cv
630.673 319.506 630.037 319.243 629.374 319.243 cv
628.711 319.243 628.075 319.506 627.606 319.975 cv
627.137 320.444 626.874 321.08 626.874 321.743 cv
626.874 322.406 627.137 323.042 627.606 323.511 cv
628.075 323.979 628.711 324.243 629.374 324.243 cv
cp
f
629.374 324.243 mo
630.037 324.243 630.673 323.979 631.142 323.511 cv
631.611 323.042 631.874 322.406 631.874 321.743 cv
631.874 321.08 631.611 320.444 631.142 319.975 cv
630.673 319.506 630.037 319.243 629.374 319.243 cv
628.711 319.243 628.075 319.506 627.606 319.975 cv
627.137 320.444 626.874 321.08 626.874 321.743 cv
626.874 322.406 627.137 323.042 627.606 323.511 cv
628.075 323.979 628.711 324.243 629.374 324.243 cv
cp
@
634.52 335.189 mo
635.183 335.189 635.818 334.926 636.287 334.457 cv
636.756 333.988 637.02 333.352 637.02 332.689 cv
637.02 332.026 636.756 331.39 636.287 330.921 cv
635.818 330.452 635.183 330.189 634.52 330.189 cv
633.857 330.189 633.221 330.452 632.752 330.921 cv
632.283 331.39 632.02 332.026 632.02 332.689 cv
632.02 333.352 632.283 333.988 632.752 334.457 cv
633.221 334.926 633.857 335.189 634.52 335.189 cv
cp
f
634.52 335.189 mo
635.183 335.189 635.818 334.926 636.287 334.457 cv
636.756 333.988 637.02 333.352 637.02 332.689 cv
637.02 332.026 636.756 331.39 636.287 330.921 cv
635.818 330.452 635.183 330.189 634.52 330.189 cv
633.857 330.189 633.221 330.452 632.752 330.921 cv
632.283 331.39 632.02 332.026 632.02 332.689 cv
632.02 333.352 632.283 333.988 632.752 334.457 cv
633.221 334.926 633.857 335.189 634.52 335.189 cv
cp
@
639.665 346.428 mo
640.328 346.428 640.964 346.164 641.433 345.696 cv
641.902 345.227 642.165 344.591 642.165 343.928 cv
642.165 343.265 641.902 342.629 641.433 342.16 cv
640.964 341.691 640.328 341.428 639.665 341.428 cv
639.002 341.428 638.366 341.691 637.897 342.16 cv
637.428 342.629 637.165 343.265 637.165 343.928 cv
637.165 344.591 637.428 345.227 637.897 345.696 cv
638.366 346.164 639.002 346.428 639.665 346.428 cv
cp
f
639.665 346.428 mo
640.328 346.428 640.964 346.164 641.433 345.696 cv
641.902 345.227 642.165 344.591 642.165 343.928 cv
642.165 343.265 641.902 342.629 641.433 342.16 cv
640.964 341.691 640.328 341.428 639.665 341.428 cv
639.002 341.428 638.366 341.691 637.897 342.16 cv
637.428 342.629 637.165 343.265 637.165 343.928 cv
637.165 344.591 637.428 345.227 637.897 345.696 cv
638.366 346.164 639.002 346.428 639.665 346.428 cv
cp
@
gsave
90 362.693 mo
648 362.693 li
648 48.9023 li
90 48.9023 li
90 362.693 li
clp
644.811 357.958 mo
645.474 357.958 646.109 357.695 646.578 357.226 cv
647.047 356.757 647.311 356.121 647.311 355.458 cv
647.311 354.795 647.047 354.159 646.578 353.69 cv
646.109 353.221 645.474 352.958 644.811 352.958 cv
644.148 352.958 643.512 353.221 643.043 353.69 cv
642.574 354.159 642.311 354.795 642.311 355.458 cv
642.311 356.121 642.574 356.757 643.043 357.226 cv
643.512 357.695 644.148 357.958 644.811 357.958 cv
cp
f
644.811 357.958 mo
645.474 357.958 646.109 357.695 646.578 357.226 cv
647.047 356.757 647.311 356.121 647.311 355.458 cv
647.311 354.795 647.047 354.159 646.578 353.69 cv
646.109 353.221 645.474 352.958 644.811 352.958 cv
644.148 352.958 643.512 353.221 643.043 353.69 cv
642.574 354.159 642.311 354.795 642.311 355.458 cv
642.311 356.121 642.574 356.757 643.043 357.226 cv
643.512 357.695 644.148 357.958 644.811 357.958 cv
cp
@
grestore
gsave
90 362.693 mo
648 362.693 li
648 48.9023 li
90 48.9023 li
90 362.693 li
clp
646.245 361.245 mo
646.908 361.245 647.544 360.982 648.012 360.513 cv
648.481 360.044 648.745 359.408 648.745 358.745 cv
648.745 358.082 648.481 357.446 648.012 356.977 cv
647.544 356.509 646.908 356.245 646.245 356.245 cv
645.582 356.245 644.946 356.509 644.477 356.977 cv
644.008 357.446 643.745 358.082 643.745 358.745 cv
643.745 359.408 644.008 360.044 644.477 360.513 cv
644.946 360.982 645.582 361.245 646.245 361.245 cv
cp
f
646.245 361.245 mo
646.908 361.245 647.544 360.982 648.012 360.513 cv
648.481 360.044 648.745 359.408 648.745 358.745 cv
648.745 358.082 648.481 357.446 648.012 356.977 cv
647.544 356.509 646.908 356.245 646.245 356.245 cv
645.582 356.245 644.946 356.509 644.477 356.977 cv
644.008 357.446 643.745 358.082 643.745 358.745 cv
643.745 359.408 644.008 360.044 644.477 360.513 cv
644.946 360.982 645.582 361.245 646.245 361.245 cv
cp
@
grestore
gsave
90 362.693 mo
648 362.693 li
648 48.9023 li
90 48.9023 li
90 362.693 li
clp
2 lw
[12.8 3.2 2 3.2 ] 0 dsh
90.9673 50.2494 mo
646.245 103.162 li
@
grestore
.8 lw
2 lc
0 lj
90 362.693 mo
90 48.9024 li
@
648 362.693 mo
648 48.9024 li
@
90 362.693 mo
648 362.693 li
@
90 48.9024 mo
648 48.9024 li
@
227.759 354.193 mo
202.423 354.193 li
202.423 321.633 li
230.459 321.633 li
230.459 351.493 li
230.458 352.483 230.215 353.13 229.806 353.539 cv
229.397 353.949 228.749 354.191 227.759 354.193 cv
201.623 354.193 mo
101.2 354.193 li
100.21 354.191 99.5627 353.949 99.1536 353.539 cv
98.744 353.13 98.5018 352.483 98.5 351.493 cv
98.5 321.633 li
201.623 321.633 li
201.623 354.193 li
230.459 320.833 mo
202.423 320.833 li
202.423 303.424 li
227.759 303.424 li
228.749 303.426 229.397 303.668 229.806 304.078 cv
230.215 304.487 230.458 305.134 230.459 306.124 cv
230.459 320.833 li
201.623 320.833 mo
98.5 320.833 li
98.5 306.124 li
98.5018 305.134 98.744 304.487 99.1536 304.077 cv
99.5627 303.668 100.21 303.426 101.2 303.424 cv
201.623 303.424 li
201.623 320.833 li
0 0 0 0 cmyk
f
202.423 354.193 mo
201.623 354.193 li
201.623 321.633 li
202.423 321.633 li
202.423 354.193 li
202.423 320.833 mo
201.623 320.833 li
201.623 303.424 li
202.423 303.424 li
202.423 320.833 li
0 0 0 .037995 cmyk
f
230.459 321.633 mo
202.423 321.633 li
202.423 320.833 li
230.459 320.833 li
230.459 321.633 li
201.623 321.633 mo
98.5 321.633 li
98.5 320.833 li
201.623 320.833 li
201.623 321.633 li
f
202.423 321.633 mo
201.623 321.633 li
201.623 320.833 li
202.423 320.833 li
202.423 321.633 li
0 0 0 .051606 cmyk
f
227.77 355.193 mo
227.766 355.193 227.763 355.193 227.759 355.193 cv
202.423 355.193 li
202.423 354.193 li
227.759 354.193 li
228.749 354.191 229.397 353.949 229.806 353.539 cv
230.215 353.13 230.458 352.483 230.459 351.493 cv
230.459 321.633 li
231.459 321.633 li
231.459 351.493 li
231.461 352.636 231.17 353.589 230.513 354.246 cv
229.857 354.901 228.909 355.193 227.77 355.193 cv
101.19 355.193 mo
100.051 355.193 99.102 354.902 98.4465 354.246 cv
97.7893 353.589 97.4982 352.636 97.5 351.493 cv
97.5 321.633 li
98.5 321.633 li
98.5 351.493 li
98.5018 352.483 98.744 353.13 99.1536 353.539 cv
99.5627 353.949 100.21 354.191 101.2 354.193 cv
101.2 354.193 li
201.623 354.193 li
201.623 355.193 li
101.2 355.193 li
101.197 355.193 101.193 355.193 101.19 355.193 cv
231.459 320.833 mo
230.459 320.833 li
230.459 306.124 li
230.458 305.134 230.215 304.487 229.806 304.078 cv
229.397 303.668 228.749 303.426 227.759 303.424 cv
202.423 303.424 li
202.423 302.424 li
227.759 302.424 li
227.763 302.424 227.767 302.424 227.77 302.424 cv
228.909 302.424 229.857 302.715 230.513 303.371 cv
231.17 304.028 231.461 304.98 231.459 306.124 cv
231.459 320.833 li
98.5 320.833 mo
97.5 320.833 li
97.5 306.124 li
97.4982 304.98 97.7893 304.028 98.4465 303.371 cv
99.102 302.715 100.051 302.424 101.19 302.424 cv
101.193 302.424 101.197 302.424 101.2 302.424 cv
201.623 302.424 li
201.623 303.424 li
101.2 303.424 li
100.21 303.426 99.5627 303.668 99.1536 304.077 cv
98.744 304.487 98.5018 305.134 98.5 306.124 cv
98.5 320.833 li
0 0 0 .184115 cmyk
f
202.423 355.193 mo
201.623 355.193 li
201.623 354.193 li
202.423 354.193 li
202.423 355.193 li
202.423 303.424 mo
201.623 303.424 li
201.623 302.424 li
202.423 302.424 li
202.423 303.424 li
0 0 0 .236149 cmyk
f
231.459 321.633 mo
230.459 321.633 li
230.459 320.833 li
231.459 320.833 li
231.459 321.633 li
98.5 321.633 mo
97.5 321.633 li
97.5 320.833 li
98.5 320.833 li
98.5 321.633 li
f
120.4 318.88 mo
121.196 318.88 121.959 318.564 122.521 318.002 cv
123.084 317.439 123.4 316.676 123.4 315.88 cv
123.4 315.085 123.084 314.322 122.521 313.759 cv
121.959 313.196 121.196 312.88 120.4 312.88 cv
119.604 312.88 118.841 313.196 118.279 313.759 cv
117.716 314.322 117.4 315.085 117.4 315.88 cv
117.4 316.676 117.716 317.439 118.279 318.002 cv
118.841 318.564 119.604 318.88 120.4 318.88 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
1 lw
0 lc
1 lj
120.4 318.88 mo
121.196 318.88 121.959 318.564 122.521 318.002 cv
123.084 317.439 123.4 316.676 123.4 315.88 cv
123.4 315.085 123.084 314.322 122.521 313.759 cv
121.959 313.196 121.196 312.88 120.4 312.88 cv
119.604 312.88 118.841 313.196 118.279 313.759 cv
117.716 314.322 117.4 315.085 117.4 315.88 cv
117.4 316.676 117.716 317.439 118.279 318.002 cv
118.841 318.564 119.604 318.88 120.4 318.88 cv
cp
@
157.984 316.2 mo
157.984 321.48 li
156.544 321.48 li
156.544 316.248 li
156.544 315.416 156.368 314.808 156.048 314.392 cv
155.728 313.976 155.248 313.768 154.608 313.768 cv
153.824 313.768 153.216 314.024 152.768 314.52 cv
152.32 315.016 152.096 315.688 152.096 316.536 cv
152.096 321.48 li
150.656 321.48 li
150.656 312.728 li
152.096 312.728 li
152.096 314.088 li
152.432 313.576 152.832 313.176 153.312 312.92 cv
153.776 312.664 154.32 312.52 154.928 312.52 cv
155.92 312.52 156.688 312.84 157.2 313.464 cv
157.712 314.088 157.984 315 157.984 316.2 cv
f
164.24 313.736 mo
163.472 313.736 162.864 314.04 162.416 314.648 cv
161.968 315.256 161.744 316.072 161.744 317.112 cv
161.744 318.168 161.952 318.984 162.4 319.592 cv
162.848 320.2 163.456 320.488 164.24 320.488 cv
165.008 320.488 165.616 320.2 166.064 319.592 cv
166.512 318.984 166.736 318.168 166.736 317.112 cv
166.736 316.088 166.512 315.256 166.064 314.648 cv
165.616 314.04 165.008 313.736 164.24 313.736 cv
164.24 312.52 mo
165.488 312.52 166.464 312.936 167.184 313.736 cv
167.888 314.552 168.256 315.672 168.256 317.112 cv
168.256 318.552 167.888 319.672 167.184 320.472 cv
166.464 321.288 165.488 321.688 164.24 321.688 cv
162.976 321.688 161.984 321.288 161.28 320.472 cv
160.576 319.672 160.224 318.552 160.224 317.112 cv
160.224 315.672 160.576 314.552 161.28 313.736 cv
161.984 312.936 162.976 312.52 164.24 312.52 cv
f
177.92 316.2 mo
177.92 321.48 li
176.48 321.48 li
176.48 316.248 li
176.48 315.416 176.304 314.808 175.984 314.392 cv
175.664 313.976 175.184 313.768 174.544 313.768 cv
173.76 313.768 173.152 314.024 172.704 314.52 cv
172.256 315.016 172.032 315.688 172.032 316.536 cv
172.032 321.48 li
170.592 321.48 li
170.592 312.728 li
172.032 312.728 li
172.032 314.088 li
172.368 313.576 172.768 313.176 173.248 312.92 cv
173.712 312.664 174.256 312.52 174.864 312.52 cv
175.856 312.52 176.624 312.84 177.136 313.464 cv
177.648 314.088 177.92 315 177.92 316.2 cv
f
180.784 309.32 mo
182.224 309.32 li
182.224 321.48 li
180.784 321.48 li
180.784 309.32 li
f
185.232 312.728 mo
186.672 312.728 li
186.672 321.48 li
185.232 321.48 li
185.232 312.728 li
185.232 309.32 mo
186.672 309.32 li
186.672 311.144 li
185.232 311.144 li
185.232 309.32 li
f
196.96 316.2 mo
196.96 321.48 li
195.52 321.48 li
195.52 316.248 li
195.52 315.416 195.344 314.808 195.024 314.392 cv
194.704 313.976 194.224 313.768 193.584 313.768 cv
192.8 313.768 192.192 314.024 191.744 314.52 cv
191.296 315.016 191.072 315.688 191.072 316.536 cv
191.072 321.48 li
189.632 321.48 li
189.632 312.728 li
191.072 312.728 li
191.072 314.088 li
191.408 313.576 191.808 313.176 192.288 312.92 cv
192.752 312.664 193.296 312.52 193.904 312.52 cv
194.896 312.52 195.664 312.84 196.176 313.464 cv
196.688 314.088 196.96 315 196.96 316.2 cv
f
207.312 316.744 mo
207.312 317.448 li
200.704 317.448 li
200.768 318.44 201.056 319.208 201.6 319.72 cv
202.128 320.232 202.864 320.488 203.824 320.488 cv
204.368 320.488 204.912 320.424 205.424 320.296 cv
205.936 320.168 206.464 319.96 206.976 319.672 cv
206.976 321.032 li
206.464 321.256 205.936 321.432 205.392 321.528 cv
204.848 321.624 204.288 321.688 203.744 321.688 cv
202.336 321.688 201.232 321.288 200.416 320.488 cv
199.6 319.688 199.2 318.584 199.2 317.192 cv
199.2 315.768 199.584 314.632 200.352 313.784 cv
201.12 312.952 202.176 312.52 203.488 312.52 cv
204.672 312.52 205.6 312.904 206.288 313.656 cv
206.96 314.424 207.312 315.448 207.312 316.744 cv
205.872 316.328 mo
205.856 315.544 205.632 314.92 205.216 314.44 cv
204.784 313.976 204.208 313.736 203.504 313.736 cv
202.704 313.736 202.064 313.976 201.584 314.424 cv
201.104 314.872 200.816 315.512 200.752 316.328 cv
205.872 316.328 li
f
213.648 317.08 mo
212.48 317.08 211.68 317.224 211.232 317.48 cv
210.784 317.752 210.56 318.2 210.56 318.84 cv
210.56 319.352 210.72 319.768 211.056 320.056 cv
211.392 320.36 211.856 320.504 212.432 320.504 cv
213.232 320.504 213.872 320.232 214.352 319.656 cv
214.832 319.096 215.072 318.344 215.072 317.4 cv
215.072 317.08 li
213.648 317.08 li
216.512 316.488 mo
216.512 321.48 li
215.072 321.48 li
215.072 320.152 li
214.736 320.696 214.32 321.08 213.84 321.32 cv
213.36 321.56 212.752 321.688 212.048 321.688 cv
211.152 321.688 210.432 321.448 209.904 320.952 cv
209.376 320.456 209.12 319.784 209.12 318.936 cv
209.12 317.96 209.44 317.224 210.112 316.712 cv
210.768 316.216 211.744 315.96 213.056 315.96 cv
215.072 315.96 li
215.072 315.816 li
215.072 315.16 214.848 314.648 214.416 314.28 cv
213.984 313.928 213.376 313.736 212.592 313.736 cv
212.08 313.736 211.6 313.8 211.12 313.928 cv
210.64 314.056 210.192 314.232 209.76 314.456 cv
209.76 313.128 li
210.272 312.936 210.784 312.776 211.28 312.68 cv
211.776 312.584 212.256 312.52 212.736 312.52 cv
214 312.52 214.944 312.856 215.568 313.512 cv
216.192 314.168 216.512 315.16 216.512 316.488 cv
f
224.544 314.072 mo
224.384 313.976 224.208 313.912 224.016 313.864 cv
223.824 313.832 223.616 313.8 223.392 313.8 cv
222.576 313.8 221.952 314.072 221.52 314.6 cv
221.072 315.128 220.864 315.88 220.864 316.872 cv
220.864 321.48 li
219.424 321.48 li
219.424 312.728 li
220.864 312.728 li
220.864 314.088 li
221.152 313.56 221.552 313.16 222.032 312.904 cv
222.512 312.648 223.104 312.52 223.808 312.52 cv
223.904 312.52 224.016 312.536 224.144 312.536 cv
224.256 312.552 224.384 312.568 224.544 312.6 cv
224.544 314.072 li
f
1.5 lw
[9.6 2.4 1.5 2.4 ] 0 dsh
104.4 339.365 mo
136.4 339.365 li
@
150.704 332.805 mo
152.144 332.805 li
152.144 344.965 li
150.704 344.965 li
150.704 332.805 li
f
155.152 336.213 mo
156.592 336.213 li
156.592 344.965 li
155.152 344.965 li
155.152 336.213 li
155.152 332.805 mo
156.592 332.805 li
156.592 334.629 li
155.152 334.629 li
155.152 332.805 li
f
166.88 339.685 mo
166.88 344.965 li
165.44 344.965 li
165.44 339.733 li
165.44 338.901 165.264 338.293 164.944 337.877 cv
164.624 337.461 164.144 337.253 163.504 337.253 cv
162.72 337.253 162.112 337.509 161.664 338.005 cv
161.216 338.501 160.992 339.173 160.992 340.021 cv
160.992 344.965 li
159.552 344.965 li
159.552 336.213 li
160.992 336.213 li
160.992 337.573 li
161.328 337.061 161.728 336.661 162.208 336.405 cv
162.672 336.149 163.216 336.005 163.824 336.005 cv
164.816 336.005 165.584 336.325 166.096 336.949 cv
166.608 337.573 166.88 338.485 166.88 339.685 cv
f
177.232 340.229 mo
177.232 340.933 li
170.624 340.933 li
170.688 341.925 170.976 342.693 171.52 343.205 cv
172.048 343.717 172.784 343.973 173.744 343.973 cv
174.288 343.973 174.832 343.909 175.344 343.781 cv
175.856 343.653 176.384 343.445 176.896 343.157 cv
176.896 344.517 li
176.384 344.741 175.856 344.917 175.312 345.013 cv
174.768 345.109 174.208 345.173 173.664 345.173 cv
172.256 345.173 171.152 344.773 170.336 343.973 cv
169.52 343.173 169.12 342.069 169.12 340.677 cv
169.12 339.253 169.504 338.117 170.272 337.269 cv
171.04 336.437 172.096 336.005 173.408 336.005 cv
174.592 336.005 175.52 336.389 176.208 337.141 cv
176.88 337.909 177.232 338.933 177.232 340.229 cv
175.792 339.813 mo
175.776 339.029 175.552 338.405 175.136 337.925 cv
174.704 337.461 174.128 337.221 173.424 337.221 cv
172.624 337.221 171.984 337.461 171.504 337.909 cv
171.024 338.357 170.736 338.997 170.672 339.813 cv
175.792 339.813 li
f
183.568 340.565 mo
182.4 340.565 181.6 340.709 181.152 340.965 cv
180.704 341.237 180.48 341.685 180.48 342.325 cv
180.48 342.837 180.64 343.253 180.976 343.541 cv
181.312 343.845 181.776 343.989 182.352 343.989 cv
183.152 343.989 183.792 343.717 184.272 343.141 cv
184.752 342.581 184.992 341.829 184.992 340.885 cv
184.992 340.565 li
183.568 340.565 li
186.432 339.973 mo
186.432 344.965 li
184.992 344.965 li
184.992 343.637 li
184.656 344.181 184.24 344.565 183.76 344.805 cv
183.28 345.045 182.672 345.173 181.968 345.173 cv
181.072 345.173 180.352 344.933 179.824 344.437 cv
179.296 343.941 179.04 343.269 179.04 342.421 cv
179.04 341.445 179.36 340.709 180.032 340.197 cv
180.688 339.701 181.664 339.445 182.976 339.445 cv
184.992 339.445 li
184.992 339.301 li
184.992 338.645 184.768 338.133 184.336 337.765 cv
183.904 337.413 183.296 337.221 182.512 337.221 cv
182 337.221 181.52 337.285 181.04 337.413 cv
180.56 337.541 180.112 337.717 179.68 337.941 cv
179.68 336.613 li
180.192 336.421 180.704 336.261 181.2 336.165 cv
181.696 336.069 182.176 336.005 182.656 336.005 cv
183.92 336.005 184.864 336.341 185.488 336.997 cv
186.112 337.653 186.432 338.645 186.432 339.973 cv
f
194.464 337.557 mo
194.304 337.461 194.128 337.397 193.936 337.349 cv
193.744 337.317 193.536 337.285 193.312 337.285 cv
192.496 337.285 191.872 337.557 191.44 338.085 cv
190.992 338.613 190.784 339.365 190.784 340.357 cv
190.784 344.965 li
189.344 344.965 li
189.344 336.213 li
190.784 336.213 li
190.784 337.573 li
191.072 337.045 191.472 336.645 191.952 336.389 cv
192.432 336.133 193.024 336.005 193.728 336.005 cv
193.824 336.005 193.936 336.021 194.064 336.021 cv
194.176 336.037 194.304 336.053 194.464 336.085 cv
194.464 337.557 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
